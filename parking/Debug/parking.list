
parking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e24  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002ee4  08002ee4  00012ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f40  08002f40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f40  08002f40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f40  08002f40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f48  08002f48  00012f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  2000000c  08002f58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08002f58  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3c0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e6c  00000000  00000000  0002a3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0002c260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  0002c968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001099b  00000000  00000000  0002cfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a04e  00000000  00000000  0003d943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cd4c  00000000  00000000  00047991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a46dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016dc  00000000  00000000  000a4730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ecc 	.word	0x08002ecc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002ecc 	.word	0x08002ecc

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b089      	sub	sp, #36	; 0x24
 800040c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	240c      	movs	r4, #12
 8000410:	193b      	adds	r3, r7, r4
 8000412:	0018      	movs	r0, r3
 8000414:	2314      	movs	r3, #20
 8000416:	001a      	movs	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f002 fd4f 	bl	8002ebc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041e:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <MX_GPIO_Init+0xcc>)
 8000420:	695a      	ldr	r2, [r3, #20]
 8000422:	4b2c      	ldr	r3, [pc, #176]	; (80004d4 <MX_GPIO_Init+0xcc>)
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	0309      	lsls	r1, r1, #12
 8000428:	430a      	orrs	r2, r1
 800042a:	615a      	str	r2, [r3, #20]
 800042c:	4b29      	ldr	r3, [pc, #164]	; (80004d4 <MX_GPIO_Init+0xcc>)
 800042e:	695a      	ldr	r2, [r3, #20]
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	031b      	lsls	r3, r3, #12
 8000434:	4013      	ands	r3, r2
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800043a:	4b26      	ldr	r3, [pc, #152]	; (80004d4 <MX_GPIO_Init+0xcc>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <MX_GPIO_Init+0xcc>)
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	03c9      	lsls	r1, r1, #15
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <MX_GPIO_Init+0xcc>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	03db      	lsls	r3, r3, #15
 8000450:	4013      	ands	r3, r2
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	4b1f      	ldr	r3, [pc, #124]	; (80004d4 <MX_GPIO_Init+0xcc>)
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <MX_GPIO_Init+0xcc>)
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	0289      	lsls	r1, r1, #10
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MX_GPIO_Init+0xcc>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	029b      	lsls	r3, r3, #10
 800046c:	4013      	ands	r3, r2
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000472:	2390      	movs	r3, #144	; 0x90
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	2200      	movs	r2, #0
 8000478:	2120      	movs	r1, #32
 800047a:	0018      	movs	r0, r3
 800047c:	f000 ff36 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000480:	193b      	adds	r3, r7, r4
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	0192      	lsls	r2, r2, #6
 8000486:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2284      	movs	r2, #132	; 0x84
 800048c:	0392      	lsls	r2, r2, #14
 800048e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000496:	193b      	adds	r3, r7, r4
 8000498:	4a0f      	ldr	r2, [pc, #60]	; (80004d8 <MX_GPIO_Init+0xd0>)
 800049a:	0019      	movs	r1, r3
 800049c:	0010      	movs	r0, r2
 800049e:	f000 fdb5 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004a2:	0021      	movs	r1, r4
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2220      	movs	r2, #32
 80004a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2201      	movs	r2, #1
 80004ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004bc:	187a      	adds	r2, r7, r1
 80004be:	2390      	movs	r3, #144	; 0x90
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fda1 	bl	800100c <HAL_GPIO_Init>

}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b009      	add	sp, #36	; 0x24
 80004d0:	bd90      	pop	{r4, r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	40021000 	.word	0x40021000
 80004d8:	48000800 	.word	0x48000800

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fbb0 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f807 	bl	80004f6 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f7ff ff8e 	bl	8000408 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 faf8 	bl	8000ae0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  _run_app();
 80004f0:	f000 f89e 	bl	8000630 <_run_app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x18>

080004f6 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f6:	b590      	push	{r4, r7, lr}
 80004f8:	b091      	sub	sp, #68	; 0x44
 80004fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fc:	2410      	movs	r4, #16
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	0018      	movs	r0, r3
 8000502:	2330      	movs	r3, #48	; 0x30
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f002 fcd8 	bl	8002ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	003b      	movs	r3, r7
 800050e:	0018      	movs	r0, r3
 8000510:	2310      	movs	r3, #16
 8000512:	001a      	movs	r2, r3
 8000514:	2100      	movs	r1, #0
 8000516:	f002 fcd1 	bl	8002ebc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051a:	0021      	movs	r1, r4
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2202      	movs	r2, #2
 8000520:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2201      	movs	r2, #1
 8000526:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2210      	movs	r2, #16
 800052c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2202      	movs	r2, #2
 8000532:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	22a0      	movs	r2, #160	; 0xa0
 800053e:	0392      	lsls	r2, r2, #14
 8000540:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	187b      	adds	r3, r7, r1
 800054a:	0018      	movs	r0, r3
 800054c:	f000 feec 	bl	8001328 <HAL_RCC_OscConfig>
 8000550:	0003      	movs	r3, r0
 8000552:	1e5a      	subs	r2, r3, #1
 8000554:	4193      	sbcs	r3, r2
 8000556:	b2db      	uxtb	r3, r3
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <_Z18SystemClock_Configv+0x6a>
  {
    Error_Handler();
 800055c:	f000 f81d 	bl	800059a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000560:	003b      	movs	r3, r7
 8000562:	2207      	movs	r2, #7
 8000564:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000566:	003b      	movs	r3, r7
 8000568:	2202      	movs	r2, #2
 800056a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	003b      	movs	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000572:	003b      	movs	r3, r7
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000578:	003b      	movs	r3, r7
 800057a:	2101      	movs	r1, #1
 800057c:	0018      	movs	r0, r3
 800057e:	f001 f9ed 	bl	800195c <HAL_RCC_ClockConfig>
 8000582:	0003      	movs	r3, r0
 8000584:	1e5a      	subs	r2, r3, #1
 8000586:	4193      	sbcs	r3, r2
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 800058e:	f000 f804 	bl	800059a <Error_Handler>
  }
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b011      	add	sp, #68	; 0x44
 8000598:	bd90      	pop	{r4, r7, pc}

0800059a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059e:	b672      	cpsid	i
}
 80005a0:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <Error_Handler+0x8>

080005a4 <_ZN6bufferC1Ev>:
    volatile char data[buffer_len];
    uint16_t buffer_read_pt;
    uint16_t buffer_write_pt;

public:
    buffer()
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
        : buffer_read_pt{ 0 }, buffer_write_pt{ 0 } {}       //init buffer pointers
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	23fa      	movs	r3, #250	; 0xfa
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	2100      	movs	r1, #0
 80005b4:	52d1      	strh	r1, [r2, r3]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a03      	ldr	r2, [pc, #12]	; (80005c8 <_ZN6bufferC1Ev+0x24>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	5299      	strh	r1, [r3, r2]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	0018      	movs	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b002      	add	sp, #8
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	000003ea 	.word	0x000003ea

080005cc <_ZNV6buffer8is_emptyEv>:

    void write_to_buffer(char byte) volatile;
    char read_from_buffer() volatile;
    bool is_empty() volatile { return buffer_read_pt == buffer_write_pt; }
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	23fa      	movs	r3, #250	; 0xfa
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	5ad3      	ldrh	r3, [r2, r3]
 80005dc:	b29a      	uxth	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4905      	ldr	r1, [pc, #20]	; (80005f8 <_ZNV6buffer8is_emptyEv+0x2c>)
 80005e2:	5a5b      	ldrh	r3, [r3, r1]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	425a      	negs	r2, r3
 80005ea:	4153      	adcs	r3, r2
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	0018      	movs	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b002      	add	sp, #8
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	000003ea 	.word	0x000003ea

080005fc <_ZN6packetC1EPFvRKN11packet_defs16packet_structureEPvES4_>:
    void* context;
    uint8_t packet_internal_state; //for the purpose of deserialization
    uint8_t get_crc(const packet_defs::packet_structure& p) const;

public:
    packet(packet_defs::callback_type packet_callback, void* packet_context):
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
        callback{ packet_callback }, context{ packet_context }, packet_internal_state{ 0 } {};
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	2384      	movs	r3, #132	; 0x84
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	68b9      	ldr	r1, [r7, #8]
 8000610:	50d1      	str	r1, [r2, r3]
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	2386      	movs	r3, #134	; 0x86
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	50d1      	str	r1, [r2, r3]
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	2388      	movs	r3, #136	; 0x88
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	2100      	movs	r1, #0
 8000624:	54d1      	strb	r1, [r2, r3]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	0018      	movs	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	b004      	add	sp, #16
 800062e:	bd80      	pop	{r7, pc}

08000630 <_run_app>:
#include <string.h>

#ifdef __cplusplus
extern "C"{
#endif
void _run_app(){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	parking_app::main();
 8000634:	f000 f804 	bl	8000640 <_ZN11parking_app4mainEv>
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <_ZN11parking_app4mainEv>:
packet parking_app::uart_deserializer{ parking_app::packet_callback, NULL };
buffer parking_app::rx_buffer{ };

uint8_t uart_data = 0;

void parking_app::main(){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &uart_data, 1);
 8000646:	4912      	ldr	r1, [pc, #72]	; (8000690 <_ZN11parking_app4mainEv+0x50>)
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <_ZN11parking_app4mainEv+0x54>)
 800064a:	2201      	movs	r2, #1
 800064c:	0018      	movs	r0, r3
 800064e:	f001 fb2b 	bl	8001ca8 <HAL_UART_Receive_IT>

	while(1){
		while(!rx_buffer.is_empty()){
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <_ZN11parking_app4mainEv+0x58>)
 8000654:	0018      	movs	r0, r3
 8000656:	f7ff ffb9 	bl	80005cc <_ZNV6buffer8is_emptyEv>
 800065a:	0003      	movs	r3, r0
 800065c:	001a      	movs	r2, r3
 800065e:	2301      	movs	r3, #1
 8000660:	4053      	eors	r3, r2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d00e      	beq.n	8000686 <_ZN11parking_app4mainEv+0x46>
			uint8_t data = (uint8_t)rx_buffer.read_from_buffer();
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <_ZN11parking_app4mainEv+0x58>)
 800066a:	0018      	movs	r0, r3
 800066c:	f000 f9fe 	bl	8000a6c <_ZNV6buffer16read_from_bufferEv>
 8000670:	0003      	movs	r3, r0
 8000672:	001a      	movs	r2, r3
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	701a      	strb	r2, [r3, #0]
			uart_deserializer.deserialize_data(&data, 1);
 8000678:	1df9      	adds	r1, r7, #7
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <_ZN11parking_app4mainEv+0x5c>)
 800067c:	2201      	movs	r2, #1
 800067e:	0018      	movs	r0, r3
 8000680:	f000 f908 	bl	8000894 <_ZN6packet16deserialize_dataEPKhh>
		while(!rx_buffer.is_empty()){
 8000684:	e7e5      	b.n	8000652 <_ZN11parking_app4mainEv+0x12>
		}

		HAL_Delay(1);
 8000686:	2001      	movs	r0, #1
 8000688:	f000 fb40 	bl	8000d0c <HAL_Delay>
	}
 800068c:	e7e1      	b.n	8000652 <_ZN11parking_app4mainEv+0x12>
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	20000528 	.word	0x20000528
 8000694:	2000052c 	.word	0x2000052c
 8000698:	2000013c 	.word	0x2000013c
 800069c:	20000028 	.word	0x20000028

080006a0 <_ZN11parking_app15packet_callbackERKN11packet_defs16packet_structureEPv>:
}

void parking_app::packet_callback(const packet_defs::packet_structure& p, void* any){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	if(strcmp((char*)p.data, "open") == 0){
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3304      	adds	r3, #4
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <_ZN11parking_app15packet_callbackERKN11packet_defs16packet_structureEPv+0x54>)
 80006b0:	0011      	movs	r1, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f7ff fd28 	bl	8000108 <strcmp>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d107      	bne.n	80006cc <_ZN11parking_app15packet_callbackERKN11packet_defs16packet_structureEPv+0x2c>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006bc:	2390      	movs	r3, #144	; 0x90
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	2201      	movs	r2, #1
 80006c2:	2120      	movs	r1, #32
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 fe11 	bl	80012ec <HAL_GPIO_WritePin>
	}
	else if(strcmp((char*)p.data, "close") == 0){
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	}
}
 80006ca:	e00f      	b.n	80006ec <_ZN11parking_app15packet_callbackERKN11packet_defs16packet_structureEPv+0x4c>
	else if(strcmp((char*)p.data, "close") == 0){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3304      	adds	r3, #4
 80006d0:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <_ZN11parking_app15packet_callbackERKN11packet_defs16packet_structureEPv+0x58>)
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff fd17 	bl	8000108 <strcmp>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d106      	bne.n	80006ec <_ZN11parking_app15packet_callbackERKN11packet_defs16packet_structureEPv+0x4c>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006de:	2390      	movs	r3, #144	; 0x90
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	2200      	movs	r2, #0
 80006e4:	2120      	movs	r1, #32
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fe00 	bl	80012ec <HAL_GPIO_WritePin>
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b002      	add	sp, #8
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	08002ee4 	.word	0x08002ee4
 80006f8:	08002eec 	.word	0x08002eec

080006fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	parking_app::rx_buffer.write_to_buffer((char)uart_data);
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <HAL_UART_RxCpltCallback+0x2c>)
 8000706:	781a      	ldrb	r2, [r3, #0]
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <HAL_UART_RxCpltCallback+0x30>)
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f000 f987 	bl	8000a20 <_ZNV6buffer15write_to_bufferEc>
	HAL_UART_Receive_IT(&huart2, &uart_data, 1);
 8000712:	4905      	ldr	r1, [pc, #20]	; (8000728 <HAL_UART_RxCpltCallback+0x2c>)
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_UART_RxCpltCallback+0x34>)
 8000716:	2201      	movs	r2, #1
 8000718:	0018      	movs	r0, r3
 800071a:	f001 fac5 	bl	8001ca8 <HAL_UART_Receive_IT>
}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	20000528 	.word	0x20000528
 800072c:	2000013c 	.word	0x2000013c
 8000730:	2000052c 	.word	0x2000052c

08000734 <_Z41__static_initialization_and_destruction_0ii>:
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d10d      	bne.n	8000760 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d109      	bne.n	8000760 <_Z41__static_initialization_and_destruction_0ii+0x2c>
packet parking_app::uart_deserializer{ parking_app::packet_callback, NULL };
 800074c:	4907      	ldr	r1, [pc, #28]	; (800076c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8000750:	2200      	movs	r2, #0
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff ff52 	bl	80005fc <_ZN6packetC1EPFvRKN11packet_defs16packet_structureEPvES4_>
buffer parking_app::rx_buffer{ };
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff ff22 	bl	80005a4 <_ZN6bufferC1Ev>
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b002      	add	sp, #8
 8000766:	bd80      	pop	{r7, pc}
 8000768:	0000ffff 	.word	0x0000ffff
 800076c:	080006a1 	.word	0x080006a1
 8000770:	20000028 	.word	0x20000028
 8000774:	2000013c 	.word	0x2000013c

08000778 <_GLOBAL__sub_I__run_app>:
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <_GLOBAL__sub_I__run_app+0x14>)
 800077e:	0019      	movs	r1, r3
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff ffd7 	bl	8000734 <_Z41__static_initialization_and_destruction_0ii>
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	0000ffff 	.word	0x0000ffff

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x44>)
 8000798:	699a      	ldr	r2, [r3, #24]
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HAL_MspInit+0x44>)
 800079c:	2101      	movs	r1, #1
 800079e:	430a      	orrs	r2, r1
 80007a0:	619a      	str	r2, [r3, #24]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_MspInit+0x44>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	2201      	movs	r2, #1
 80007a8:	4013      	ands	r3, r2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_MspInit+0x44>)
 80007b0:	69da      	ldr	r2, [r3, #28]
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_MspInit+0x44>)
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	0549      	lsls	r1, r1, #21
 80007b8:	430a      	orrs	r2, r1
 80007ba:	61da      	str	r2, [r3, #28]
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_MspInit+0x44>)
 80007be:	69da      	ldr	r2, [r3, #28]
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	055b      	lsls	r3, r3, #21
 80007c4:	4013      	ands	r3, r2
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b002      	add	sp, #8
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	40021000 	.word	0x40021000

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fc:	f000 fa6a 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <USART2_IRQHandler+0x14>)
 800080e:	0018      	movs	r0, r3
 8000810:	f001 faac 	bl	8001d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	2000052c 	.word	0x2000052c

08000820 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_ZNK6packet7get_crcERKN11packet_defs16packet_structureE>:
    }

    return *this;
}

uint8_t packet::get_crc(const packet_defs::packet_structure& p) const{
 800082a:	b580      	push	{r7, lr}
 800082c:	b084      	sub	sp, #16
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	6039      	str	r1, [r7, #0]
    uint8_t tmp_crc = 0;
 8000834:	200f      	movs	r0, #15
 8000836:	183b      	adds	r3, r7, r0
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]

    tmp_crc += p.packet_header.packet_length;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	7899      	ldrb	r1, [r3, #2]
 8000840:	183b      	adds	r3, r7, r0
 8000842:	183a      	adds	r2, r7, r0
 8000844:	7812      	ldrb	r2, [r2, #0]
 8000846:	188a      	adds	r2, r1, r2
 8000848:	701a      	strb	r2, [r3, #0]

    for(uint16_t i = 0; i < p.packet_header.packet_length; ++i){
 800084a:	230c      	movs	r3, #12
 800084c:	18fb      	adds	r3, r7, r3
 800084e:	2200      	movs	r2, #0
 8000850:	801a      	strh	r2, [r3, #0]
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	789b      	ldrb	r3, [r3, #2]
 8000856:	b29b      	uxth	r3, r3
 8000858:	200c      	movs	r0, #12
 800085a:	183a      	adds	r2, r7, r0
 800085c:	8812      	ldrh	r2, [r2, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d210      	bcs.n	8000884 <_ZNK6packet7get_crcERKN11packet_defs16packet_structureE+0x5a>
        tmp_crc += p.data[i];
 8000862:	183b      	adds	r3, r7, r0
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	683a      	ldr	r2, [r7, #0]
 8000868:	18d3      	adds	r3, r2, r3
 800086a:	7919      	ldrb	r1, [r3, #4]
 800086c:	220f      	movs	r2, #15
 800086e:	18bb      	adds	r3, r7, r2
 8000870:	18ba      	adds	r2, r7, r2
 8000872:	7812      	ldrb	r2, [r2, #0]
 8000874:	188a      	adds	r2, r1, r2
 8000876:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < p.packet_header.packet_length; ++i){
 8000878:	183b      	adds	r3, r7, r0
 800087a:	183a      	adds	r2, r7, r0
 800087c:	8812      	ldrh	r2, [r2, #0]
 800087e:	3201      	adds	r2, #1
 8000880:	801a      	strh	r2, [r3, #0]
 8000882:	e7e6      	b.n	8000852 <_ZNK6packet7get_crcERKN11packet_defs16packet_structureE+0x28>
    }

    return tmp_crc;
 8000884:	230f      	movs	r3, #15
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	781b      	ldrb	r3, [r3, #0]
}
 800088a:	0018      	movs	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	b004      	add	sp, #16
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <_ZN6packet16deserialize_dataEPKhh>:
    for(uint16_t i = packet_defs::header_len; i < p.packet_header.packet_length + packet_defs::header_len; ++i){
        packet_structure.data[i] = p.data[i - packet_defs::header_len];
    }
}

void packet::deserialize_data(const uint8_t* data, uint8_t data_len){
 8000894:	b5b0      	push	{r4, r5, r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < data_len; ++i){
 80008a2:	2317      	movs	r3, #23
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
 80008aa:	2117      	movs	r1, #23
 80008ac:	187a      	adds	r2, r7, r1
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	7812      	ldrb	r2, [r2, #0]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d300      	bcc.n	80008ba <_ZN6packet16deserialize_dataEPKhh+0x26>
 80008b8:	e0aa      	b.n	8000a10 <_ZN6packet16deserialize_dataEPKhh+0x17c>
        uint8_t tmp = data[i];
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	18d2      	adds	r2, r2, r3
 80008c2:	2313      	movs	r3, #19
 80008c4:	18fb      	adds	r3, r7, r3
 80008c6:	7812      	ldrb	r2, [r2, #0]
 80008c8:	701a      	strb	r2, [r3, #0]
        static uint8_t data_count;

        switch(packet_internal_state){
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	2388      	movs	r3, #136	; 0x88
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	d846      	bhi.n	8000964 <_ZN6packet16deserialize_dataEPKhh+0xd0>
 80008d6:	009a      	lsls	r2, r3, #2
 80008d8:	4b4f      	ldr	r3, [pc, #316]	; (8000a18 <_ZN6packet16deserialize_dataEPKhh+0x184>)
 80008da:	18d3      	adds	r3, r2, r3
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	469f      	mov	pc, r3
            case packet_defs::packet_states::waiting_for_start:
            if(tmp == packet_defs::packet_start){
 80008e0:	2213      	movs	r2, #19
 80008e2:	18bb      	adds	r3, r7, r2
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b69      	cmp	r3, #105	; 0x69
 80008e8:	d13b      	bne.n	8000962 <_ZN6packet16deserialize_dataEPKhh+0xce>
                packet_structure.packet_header.packet_start = tmp;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	18ba      	adds	r2, r7, r2
 80008ee:	7812      	ldrb	r2, [r2, #0]
 80008f0:	701a      	strb	r2, [r3, #0]
                packet_internal_state = packet_defs::packet_states::waiting_for_type;
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	2388      	movs	r3, #136	; 0x88
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2101      	movs	r1, #1
 80008fa:	54d1      	strb	r1, [r2, r3]
            }
            break;
 80008fc:	e031      	b.n	8000962 <_ZN6packet16deserialize_dataEPKhh+0xce>

            case packet_defs::packet_states::waiting_for_type:
                packet_structure.packet_header.packet_type = tmp;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	2213      	movs	r2, #19
 8000902:	18ba      	adds	r2, r7, r2
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	705a      	strb	r2, [r3, #1]
                packet_internal_state = packet_defs::packet_states::waiting_for_len;
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	2388      	movs	r3, #136	; 0x88
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2102      	movs	r1, #2
 8000910:	54d1      	strb	r1, [r2, r3]
            break;
 8000912:	e027      	b.n	8000964 <_ZN6packet16deserialize_dataEPKhh+0xd0>

            case packet_defs::packet_states::waiting_for_len:
                packet_structure.packet_header.packet_length = tmp;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2213      	movs	r2, #19
 8000918:	18ba      	adds	r2, r7, r2
 800091a:	7812      	ldrb	r2, [r2, #0]
 800091c:	709a      	strb	r2, [r3, #2]
                data_count = 0;
 800091e:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <_ZN6packet16deserialize_dataEPKhh+0x188>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
                packet_internal_state = packet_defs::packet_states::waiting_for_crc;
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	2388      	movs	r3, #136	; 0x88
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	2103      	movs	r1, #3
 800092c:	54d1      	strb	r1, [r2, r3]
            break;
 800092e:	e019      	b.n	8000964 <_ZN6packet16deserialize_dataEPKhh+0xd0>

            case packet_defs::packet_states::waiting_for_crc:
                packet_structure.packet_header.packet_crc = tmp;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2213      	movs	r2, #19
 8000934:	18ba      	adds	r2, r7, r2
 8000936:	7812      	ldrb	r2, [r2, #0]
 8000938:	70da      	strb	r2, [r3, #3]
                packet_internal_state = packet_defs::packet_states::data_acquisition;
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	2388      	movs	r3, #136	; 0x88
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	2104      	movs	r1, #4
 8000942:	54d1      	strb	r1, [r2, r3]
            break;
 8000944:	e00e      	b.n	8000964 <_ZN6packet16deserialize_dataEPKhh+0xd0>

            case packet_defs::packet_states::data_acquisition:
                packet_structure.data[data_count++] = tmp;
 8000946:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <_ZN6packet16deserialize_dataEPKhh+0x188>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	b2d1      	uxtb	r1, r2
 800094e:	4a33      	ldr	r2, [pc, #204]	; (8000a1c <_ZN6packet16deserialize_dataEPKhh+0x188>)
 8000950:	7011      	strb	r1, [r2, #0]
 8000952:	001a      	movs	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	189b      	adds	r3, r3, r2
 8000958:	2213      	movs	r2, #19
 800095a:	18ba      	adds	r2, r7, r2
 800095c:	7812      	ldrb	r2, [r2, #0]
 800095e:	711a      	strb	r2, [r3, #4]
            break;
 8000960:	e000      	b.n	8000964 <_ZN6packet16deserialize_dataEPKhh+0xd0>
            break;
 8000962:	46c0      	nop			; (mov r8, r8)
        }
        auto statement = packet_internal_state == packet_defs::packet_states::data_acquisition;
 8000964:	68fa      	ldr	r2, [r7, #12]
 8000966:	2388      	movs	r3, #136	; 0x88
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	5cd2      	ldrb	r2, [r2, r3]
 800096c:	2012      	movs	r0, #18
 800096e:	183b      	adds	r3, r7, r0
 8000970:	3a04      	subs	r2, #4
 8000972:	4251      	negs	r1, r2
 8000974:	414a      	adcs	r2, r1
 8000976:	701a      	strb	r2, [r3, #0]

        if(data_count >= packet_structure.packet_header.packet_length && statement){
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	789a      	ldrb	r2, [r3, #2]
 800097c:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <_ZN6packet16deserialize_dataEPKhh+0x188>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	d83e      	bhi.n	8000a02 <_ZN6packet16deserialize_dataEPKhh+0x16e>
 8000984:	183b      	adds	r3, r7, r0
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d03a      	beq.n	8000a02 <_ZN6packet16deserialize_dataEPKhh+0x16e>
            uint8_t tmp_crc = get_crc(packet_structure);
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	2511      	movs	r5, #17
 8000990:	197c      	adds	r4, r7, r5
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f7ff ff47 	bl	800082a <_ZNK6packet7get_crcERKN11packet_defs16packet_structureE>
 800099c:	0003      	movs	r3, r0
 800099e:	7023      	strb	r3, [r4, #0]

            if(tmp_crc == packet_structure.packet_header.packet_crc){
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	78db      	ldrb	r3, [r3, #3]
 80009a4:	197a      	adds	r2, r7, r5
 80009a6:	7812      	ldrb	r2, [r2, #0]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d11f      	bne.n	80009ec <_ZN6packet16deserialize_dataEPKhh+0x158>
                callback(packet_structure, context);
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	2384      	movs	r3, #132	; 0x84
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	58d3      	ldr	r3, [r2, r3]
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	68f9      	ldr	r1, [r7, #12]
 80009b8:	2286      	movs	r2, #134	; 0x86
 80009ba:	0052      	lsls	r2, r2, #1
 80009bc:	588a      	ldr	r2, [r1, r2]
 80009be:	0011      	movs	r1, r2
 80009c0:	4798      	blx	r3
                for(uint16_t i = 0; i < packet_defs::max_data_len; ++i){
 80009c2:	2314      	movs	r3, #20
 80009c4:	18fb      	adds	r3, r7, r3
 80009c6:	2200      	movs	r2, #0
 80009c8:	801a      	strh	r2, [r3, #0]
 80009ca:	2114      	movs	r1, #20
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	2bfe      	cmp	r3, #254	; 0xfe
 80009d2:	d80b      	bhi.n	80009ec <_ZN6packet16deserialize_dataEPKhh+0x158>
                	packet_structure.data[i] = 0;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	18d3      	adds	r3, r2, r3
 80009dc:	2200      	movs	r2, #0
 80009de:	711a      	strb	r2, [r3, #4]
                for(uint16_t i = 0; i < packet_defs::max_data_len; ++i){
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	187a      	adds	r2, r7, r1
 80009e4:	8812      	ldrh	r2, [r2, #0]
 80009e6:	3201      	adds	r2, #1
 80009e8:	801a      	strh	r2, [r3, #0]
 80009ea:	e7ee      	b.n	80009ca <_ZN6packet16deserialize_dataEPKhh+0x136>
                }
            }
            --i;
 80009ec:	2217      	movs	r2, #23
 80009ee:	18bb      	adds	r3, r7, r2
 80009f0:	18ba      	adds	r2, r7, r2
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	3a01      	subs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
            packet_internal_state = packet_defs::packet_states::waiting_for_start;
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	2388      	movs	r3, #136	; 0x88
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2100      	movs	r1, #0
 8000a00:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 0; i < data_len; ++i){
 8000a02:	2217      	movs	r2, #23
 8000a04:	18bb      	adds	r3, r7, r2
 8000a06:	18ba      	adds	r2, r7, r2
 8000a08:	7812      	ldrb	r2, [r2, #0]
 8000a0a:	3201      	adds	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
 8000a0e:	e74c      	b.n	80008aa <_ZN6packet16deserialize_dataEPKhh+0x16>
        }
    }
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b006      	add	sp, #24
 8000a16:	bdb0      	pop	{r4, r5, r7, pc}
 8000a18:	08002f2c 	.word	0x08002f2c
 8000a1c:	20000529 	.word	0x20000529

08000a20 <_ZNV6buffer15write_to_bufferEc>:
 *      Author: Michael
 */

#include "uart_rx_buffer.h"

void buffer::write_to_buffer(char byte) volatile{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	000a      	movs	r2, r1
 8000a2a:	1cfb      	adds	r3, r7, #3
 8000a2c:	701a      	strb	r2, [r3, #0]
    data[buffer_write_pt] = byte;                            //write to buffer
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <_ZNV6buffer15write_to_bufferEc+0x48>)
 8000a32:	5a9b      	ldrh	r3, [r3, r2]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	0019      	movs	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	1cfa      	adds	r2, r7, #3
 8000a3c:	7812      	ldrb	r2, [r2, #0]
 8000a3e:	545a      	strb	r2, [r3, r1]
    buffer_write_pt = (buffer_write_pt + 1) % buffer_len;    // increment buffer write pointer
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <_ZNV6buffer15write_to_bufferEc+0x48>)
 8000a44:	5a9b      	ldrh	r3, [r3, r2]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	3301      	adds	r3, #1
 8000a4a:	22fa      	movs	r2, #250	; 0xfa
 8000a4c:	0091      	lsls	r1, r2, #2
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f7ff fcd4 	bl	80003fc <__aeabi_idivmod>
 8000a54:	000b      	movs	r3, r1
 8000a56:	b299      	uxth	r1, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a03      	ldr	r2, [pc, #12]	; (8000a68 <_ZNV6buffer15write_to_bufferEc+0x48>)
 8000a5c:	5299      	strh	r1, [r3, r2]
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	000003ea 	.word	0x000003ea

08000a6c <_ZNV6buffer16read_from_bufferEv>:

char buffer::read_from_buffer() volatile{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    if(buffer_read_pt != buffer_write_pt){
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	23fa      	movs	r3, #250	; 0xfa
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	5ad3      	ldrh	r3, [r2, r3]
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4916      	ldr	r1, [pc, #88]	; (8000adc <_ZNV6buffer16read_from_bufferEv+0x70>)
 8000a82:	5a5b      	ldrh	r3, [r3, r1]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	1e5a      	subs	r2, r3, #1
 8000a8a:	4193      	sbcs	r3, r2
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d01e      	beq.n	8000ad0 <_ZNV6buffer16read_from_bufferEv+0x64>
        char byte = data[buffer_read_pt];                    //read data from buffer
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	23fa      	movs	r3, #250	; 0xfa
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	5ad3      	ldrh	r3, [r2, r3]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	240f      	movs	r4, #15
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	5c52      	ldrb	r2, [r2, r1]
 8000aa6:	701a      	strb	r2, [r3, #0]
        buffer_read_pt = (buffer_read_pt + 1) % buffer_len;  //increment read pointer
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	23fa      	movs	r3, #250	; 0xfa
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	5ad3      	ldrh	r3, [r2, r3]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	22fa      	movs	r2, #250	; 0xfa
 8000ab6:	0091      	lsls	r1, r2, #2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff fc9f 	bl	80003fc <__aeabi_idivmod>
 8000abe:	000b      	movs	r3, r1
 8000ac0:	b299      	uxth	r1, r3
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	23fa      	movs	r3, #250	; 0xfa
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	52d1      	strh	r1, [r2, r3]

        return byte;                                         //return data
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	e000      	b.n	8000ad2 <_ZNV6buffer16read_from_bufferEv+0x66>
    }

    return -1;                                               //return -1 if buffer is empty
 8000ad0:	23ff      	movs	r3, #255	; 0xff
}
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b005      	add	sp, #20
 8000ad8:	bd90      	pop	{r4, r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	000003ea 	.word	0x000003ea

08000ae0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_USART2_UART_Init+0x60>)
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <MX_USART2_UART_Init+0x64>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_USART2_UART_Init+0x60>)
 8000aec:	22e1      	movs	r2, #225	; 0xe1
 8000aee:	0252      	lsls	r2, r2, #9
 8000af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_USART2_UART_Init+0x60>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_USART2_UART_Init+0x60>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_USART2_UART_Init+0x60>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART2_UART_Init+0x60>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <MX_USART2_UART_Init+0x60>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_USART2_UART_Init+0x60>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MX_USART2_UART_Init+0x60>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_USART2_UART_Init+0x60>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_USART2_UART_Init+0x60>)
 8000b24:	0018      	movs	r0, r3
 8000b26:	f001 f86b 	bl	8001c00 <HAL_UART_Init>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b2e:	f7ff fd34 	bl	800059a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_MspInit(&huart2);
 8000b32:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <MX_USART2_UART_Init+0x60>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f000 f807 	bl	8000b48 <HAL_UART_MspInit>
  /* USER CODE END USART2_Init 2 */

}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2000052c 	.word	0x2000052c
 8000b44:	40004400 	.word	0x40004400

08000b48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b08b      	sub	sp, #44	; 0x2c
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	2414      	movs	r4, #20
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	0018      	movs	r0, r3
 8000b56:	2314      	movs	r3, #20
 8000b58:	001a      	movs	r2, r3
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f002 f9ae 	bl	8002ebc <memset>
  if(uartHandle->Instance==USART2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <HAL_UART_MspInit+0xa0>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d13a      	bne.n	8000be0 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_UART_MspInit+0xa4>)
 8000b6c:	69da      	ldr	r2, [r3, #28]
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <HAL_UART_MspInit+0xa4>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	0289      	lsls	r1, r1, #10
 8000b74:	430a      	orrs	r2, r1
 8000b76:	61da      	str	r2, [r3, #28]
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_UART_MspInit+0xa4>)
 8000b7a:	69da      	ldr	r2, [r3, #28]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	029b      	lsls	r3, r3, #10
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_UART_MspInit+0xa4>)
 8000b88:	695a      	ldr	r2, [r3, #20]
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_UART_MspInit+0xa4>)
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	0289      	lsls	r1, r1, #10
 8000b90:	430a      	orrs	r2, r1
 8000b92:	615a      	str	r2, [r3, #20]
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_UART_MspInit+0xa4>)
 8000b96:	695a      	ldr	r2, [r3, #20]
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	029b      	lsls	r3, r3, #10
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ba2:	0021      	movs	r1, r4
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2202      	movs	r2, #2
 8000bae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	187a      	adds	r2, r7, r1
 8000bc4:	2390      	movs	r3, #144	; 0x90
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	0011      	movs	r1, r2
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 fa1e 	bl	800100c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	201c      	movs	r0, #28
 8000bd6:	f000 f969 	bl	8000eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bda:	201c      	movs	r0, #28
 8000bdc:	f000 f97b 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b00b      	add	sp, #44	; 0x2c
 8000be6:	bd90      	pop	{r4, r7, pc}
 8000be8:	40004400 	.word	0x40004400
 8000bec:	40021000 	.word	0x40021000

08000bf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490e      	ldr	r1, [pc, #56]	; (8000c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0b      	ldr	r4, [pc, #44]	; (8000c3c <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c1a:	f7ff fe01 	bl	8000820 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c1e:	f002 f929 	bl	8002e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c22:	f7ff fc5b 	bl	80004dc <main>

08000c26 <LoopForever>:

LoopForever:
    b LoopForever
 8000c26:	e7fe      	b.n	8000c26 <LoopForever>
  ldr   r0, =_estack
 8000c28:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c34:	08002f4c 	.word	0x08002f4c
  ldr r2, =_sbss
 8000c38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c3c:	200005b4 	.word	0x200005b4

08000c40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_IRQHandler>
	...

08000c44 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <HAL_Init+0x24>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_Init+0x24>)
 8000c4e:	2110      	movs	r1, #16
 8000c50:	430a      	orrs	r2, r1
 8000c52:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f000 f809 	bl	8000c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5a:	f7ff fd99 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	40022000 	.word	0x40022000

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_InitTick+0x5c>)
 8000c76:	681c      	ldr	r4, [r3, #0]
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <HAL_InitTick+0x60>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	0019      	movs	r1, r3
 8000c7e:	23fa      	movs	r3, #250	; 0xfa
 8000c80:	0098      	lsls	r0, r3, #2
 8000c82:	f7ff fa4b 	bl	800011c <__udivsi3>
 8000c86:	0003      	movs	r3, r0
 8000c88:	0019      	movs	r1, r3
 8000c8a:	0020      	movs	r0, r4
 8000c8c:	f7ff fa46 	bl	800011c <__udivsi3>
 8000c90:	0003      	movs	r3, r0
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 f92f 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d001      	beq.n	8000ca0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e00f      	b.n	8000cc0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d80b      	bhi.n	8000cbe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	425b      	negs	r3, r3
 8000cac:	2200      	movs	r2, #0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 f8fc 	bl	8000eac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_InitTick+0x64>)
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b003      	add	sp, #12
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x1c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	001a      	movs	r2, r3
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_IncTick+0x20>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	18d2      	adds	r2, r2, r3
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_IncTick+0x20>)
 8000ce6:	601a      	str	r2, [r3, #0]
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	200005b0 	.word	0x200005b0

08000cf8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <HAL_GetTick+0x10>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	200005b0 	.word	0x200005b0

08000d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f7ff fff0 	bl	8000cf8 <HAL_GetTick>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3301      	adds	r3, #1
 8000d24:	d005      	beq.n	8000d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_Delay+0x44>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	189b      	adds	r3, r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	f7ff ffe0 	bl	8000cf8 <HAL_GetTick>
 8000d38:	0002      	movs	r2, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8f7      	bhi.n	8000d34 <HAL_Delay+0x28>
  {
  }
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b004      	add	sp, #16
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	20000008 	.word	0x20000008

08000d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	1dfb      	adds	r3, r7, #7
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b7f      	cmp	r3, #127	; 0x7f
 8000d66:	d809      	bhi.n	8000d7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d68:	1dfb      	adds	r3, r7, #7
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	231f      	movs	r3, #31
 8000d70:	401a      	ands	r2, r3
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <__NVIC_EnableIRQ+0x30>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	4091      	lsls	r1, r2
 8000d78:	000a      	movs	r2, r1
 8000d7a:	601a      	str	r2, [r3, #0]
  }
}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b002      	add	sp, #8
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	0002      	movs	r2, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d9c:	d828      	bhi.n	8000df0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d9e:	4a2f      	ldr	r2, [pc, #188]	; (8000e5c <__NVIC_SetPriority+0xd4>)
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	33c0      	adds	r3, #192	; 0xc0
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	589b      	ldr	r3, [r3, r2]
 8000dae:	1dfa      	adds	r2, r7, #7
 8000db0:	7812      	ldrb	r2, [r2, #0]
 8000db2:	0011      	movs	r1, r2
 8000db4:	2203      	movs	r2, #3
 8000db6:	400a      	ands	r2, r1
 8000db8:	00d2      	lsls	r2, r2, #3
 8000dba:	21ff      	movs	r1, #255	; 0xff
 8000dbc:	4091      	lsls	r1, r2
 8000dbe:	000a      	movs	r2, r1
 8000dc0:	43d2      	mvns	r2, r2
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	019b      	lsls	r3, r3, #6
 8000dca:	22ff      	movs	r2, #255	; 0xff
 8000dcc:	401a      	ands	r2, r3
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	4003      	ands	r3, r0
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ddc:	481f      	ldr	r0, [pc, #124]	; (8000e5c <__NVIC_SetPriority+0xd4>)
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	430a      	orrs	r2, r1
 8000de8:	33c0      	adds	r3, #192	; 0xc0
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dee:	e031      	b.n	8000e54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df0:	4a1b      	ldr	r2, [pc, #108]	; (8000e60 <__NVIC_SetPriority+0xd8>)
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	0019      	movs	r1, r3
 8000df8:	230f      	movs	r3, #15
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	3b08      	subs	r3, #8
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	3306      	adds	r3, #6
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	18d3      	adds	r3, r2, r3
 8000e06:	3304      	adds	r3, #4
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	1dfa      	adds	r2, r7, #7
 8000e0c:	7812      	ldrb	r2, [r2, #0]
 8000e0e:	0011      	movs	r1, r2
 8000e10:	2203      	movs	r2, #3
 8000e12:	400a      	ands	r2, r1
 8000e14:	00d2      	lsls	r2, r2, #3
 8000e16:	21ff      	movs	r1, #255	; 0xff
 8000e18:	4091      	lsls	r1, r2
 8000e1a:	000a      	movs	r2, r1
 8000e1c:	43d2      	mvns	r2, r2
 8000e1e:	401a      	ands	r2, r3
 8000e20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	019b      	lsls	r3, r3, #6
 8000e26:	22ff      	movs	r2, #255	; 0xff
 8000e28:	401a      	ands	r2, r3
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	0018      	movs	r0, r3
 8000e30:	2303      	movs	r3, #3
 8000e32:	4003      	ands	r3, r0
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <__NVIC_SetPriority+0xd8>)
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	001c      	movs	r4, r3
 8000e40:	230f      	movs	r3, #15
 8000e42:	4023      	ands	r3, r4
 8000e44:	3b08      	subs	r3, #8
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	3306      	adds	r3, #6
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	18c3      	adds	r3, r0, r3
 8000e50:	3304      	adds	r3, #4
 8000e52:	601a      	str	r2, [r3, #0]
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b003      	add	sp, #12
 8000e5a:	bd90      	pop	{r4, r7, pc}
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	1e5a      	subs	r2, r3, #1
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	045b      	lsls	r3, r3, #17
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d301      	bcc.n	8000e7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e010      	b.n	8000e9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <SysTick_Config+0x44>)
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	3a01      	subs	r2, #1
 8000e82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e84:	2301      	movs	r3, #1
 8000e86:	425b      	negs	r3, r3
 8000e88:	2103      	movs	r1, #3
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff ff7c 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SysTick_Config+0x44>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SysTick_Config+0x44>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	1c02      	adds	r2, r0, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff ff5d 	bl	8000d88 <__NVIC_SetPriority>
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b004      	add	sp, #16
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	0002      	movs	r2, r0
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff ff33 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b002      	add	sp, #8
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff ffaf 	bl	8000e64 <SysTick_Config>
 8000f06:	0003      	movs	r3, r0
}
 8000f08:	0018      	movs	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2221      	movs	r2, #33	; 0x21
 8000f1c:	5c9b      	ldrb	r3, [r3, r2]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d008      	beq.n	8000f36 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2204      	movs	r2, #4
 8000f28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	2100      	movs	r1, #0
 8000f30:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e020      	b.n	8000f78 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	210e      	movs	r1, #14
 8000f42:	438a      	bics	r2, r1
 8000f44:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2101      	movs	r1, #1
 8000f52:	438a      	bics	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4091      	lsls	r1, r2
 8000f62:	000a      	movs	r2, r1
 8000f64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2221      	movs	r2, #33	; 0x21
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2220      	movs	r2, #32
 8000f72:	2100      	movs	r1, #0
 8000f74:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	0018      	movs	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f88:	210f      	movs	r1, #15
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2221      	movs	r2, #33	; 0x21
 8000f94:	5c9b      	ldrb	r3, [r3, r2]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d006      	beq.n	8000faa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	e028      	b.n	8000ffc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	210e      	movs	r1, #14
 8000fb6:	438a      	bics	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	438a      	bics	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4091      	lsls	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2221      	movs	r2, #33	; 0x21
 8000fde:	2101      	movs	r1, #1
 8000fe0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d004      	beq.n	8000ffc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	0010      	movs	r0, r2
 8000ffa:	4798      	blx	r3
    } 
  }
  return status;
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	781b      	ldrb	r3, [r3, #0]
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b004      	add	sp, #16
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	e14f      	b.n	80012bc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4091      	lsls	r1, r2
 8001026:	000a      	movs	r2, r1
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d100      	bne.n	8001034 <HAL_GPIO_Init+0x28>
 8001032:	e140      	b.n	80012b6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2203      	movs	r2, #3
 800103a:	4013      	ands	r3, r2
 800103c:	2b01      	cmp	r3, #1
 800103e:	d005      	beq.n	800104c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2203      	movs	r2, #3
 8001046:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001048:	2b02      	cmp	r3, #2
 800104a:	d130      	bne.n	80010ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	409a      	lsls	r2, r3
 800105a:	0013      	movs	r3, r2
 800105c:	43da      	mvns	r2, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	409a      	lsls	r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001082:	2201      	movs	r2, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	43da      	mvns	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	2201      	movs	r2, #1
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2203      	movs	r2, #3
 80010b4:	4013      	ands	r3, r2
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d017      	beq.n	80010ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	409a      	lsls	r2, r3
 80010c8:	0013      	movs	r3, r2
 80010ca:	43da      	mvns	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2203      	movs	r2, #3
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d123      	bne.n	800113e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	58d3      	ldr	r3, [r2, r3]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2207      	movs	r2, #7
 8001108:	4013      	ands	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2107      	movs	r1, #7
 8001122:	400b      	ands	r3, r1
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	6939      	ldr	r1, [r7, #16]
 800113c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2203      	movs	r2, #3
 800115c:	401a      	ands	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	23c0      	movs	r3, #192	; 0xc0
 8001178:	029b      	lsls	r3, r3, #10
 800117a:	4013      	ands	r3, r2
 800117c:	d100      	bne.n	8001180 <HAL_GPIO_Init+0x174>
 800117e:	e09a      	b.n	80012b6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001180:	4b54      	ldr	r3, [pc, #336]	; (80012d4 <HAL_GPIO_Init+0x2c8>)
 8001182:	699a      	ldr	r2, [r3, #24]
 8001184:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <HAL_GPIO_Init+0x2c8>)
 8001186:	2101      	movs	r1, #1
 8001188:	430a      	orrs	r2, r1
 800118a:	619a      	str	r2, [r3, #24]
 800118c:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <HAL_GPIO_Init+0x2c8>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	2201      	movs	r2, #1
 8001192:	4013      	ands	r3, r2
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001198:	4a4f      	ldr	r2, [pc, #316]	; (80012d8 <HAL_GPIO_Init+0x2cc>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	589b      	ldr	r3, [r3, r2]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2203      	movs	r2, #3
 80011aa:	4013      	ands	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	409a      	lsls	r2, r3
 80011b2:	0013      	movs	r3, r2
 80011b4:	43da      	mvns	r2, r3
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	2390      	movs	r3, #144	; 0x90
 80011c0:	05db      	lsls	r3, r3, #23
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0x1e2>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a44      	ldr	r2, [pc, #272]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00d      	beq.n	80011ea <HAL_GPIO_Init+0x1de>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a43      	ldr	r2, [pc, #268]	; (80012e0 <HAL_GPIO_Init+0x2d4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x1da>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a42      	ldr	r2, [pc, #264]	; (80012e4 <HAL_GPIO_Init+0x2d8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_GPIO_Init+0x1d6>
 80011de:	2303      	movs	r3, #3
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011ee:	2300      	movs	r3, #0
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	2103      	movs	r1, #3
 80011f4:	400a      	ands	r2, r1
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001200:	4935      	ldr	r1, [pc, #212]	; (80012d8 <HAL_GPIO_Init+0x2cc>)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43da      	mvns	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	025b      	lsls	r3, r3, #9
 8001226:	4013      	ands	r3, r2
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43da      	mvns	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	029b      	lsls	r3, r3, #10
 8001250:	4013      	ands	r3, r2
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43da      	mvns	r2, r3
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	035b      	lsls	r3, r3, #13
 800127a:	4013      	ands	r3, r2
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43da      	mvns	r2, r3
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	039b      	lsls	r3, r3, #14
 80012a4:	4013      	ands	r3, r2
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	40da      	lsrs	r2, r3
 80012c4:	1e13      	subs	r3, r2, #0
 80012c6:	d000      	beq.n	80012ca <HAL_GPIO_Init+0x2be>
 80012c8:	e6a8      	b.n	800101c <HAL_GPIO_Init+0x10>
  } 
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b006      	add	sp, #24
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010000 	.word	0x40010000
 80012dc:	48000400 	.word	0x48000400
 80012e0:	48000800 	.word	0x48000800
 80012e4:	48000c00 	.word	0x48000c00
 80012e8:	40010400 	.word	0x40010400

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	0008      	movs	r0, r1
 80012f6:	0011      	movs	r1, r2
 80012f8:	1cbb      	adds	r3, r7, #2
 80012fa:	1c02      	adds	r2, r0, #0
 80012fc:	801a      	strh	r2, [r3, #0]
 80012fe:	1c7b      	adds	r3, r7, #1
 8001300:	1c0a      	adds	r2, r1, #0
 8001302:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001304:	1c7b      	adds	r3, r7, #1
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d004      	beq.n	8001316 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130c:	1cbb      	adds	r3, r7, #2
 800130e:	881a      	ldrh	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001316:	1cbb      	adds	r3, r7, #2
 8001318:	881a      	ldrh	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b002      	add	sp, #8
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e301      	b.n	800193e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2201      	movs	r2, #1
 8001340:	4013      	ands	r3, r2
 8001342:	d100      	bne.n	8001346 <HAL_RCC_OscConfig+0x1e>
 8001344:	e08d      	b.n	8001462 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001346:	4bc3      	ldr	r3, [pc, #780]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	220c      	movs	r2, #12
 800134c:	4013      	ands	r3, r2
 800134e:	2b04      	cmp	r3, #4
 8001350:	d00e      	beq.n	8001370 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001352:	4bc0      	ldr	r3, [pc, #768]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	220c      	movs	r2, #12
 8001358:	4013      	ands	r3, r2
 800135a:	2b08      	cmp	r3, #8
 800135c:	d116      	bne.n	800138c <HAL_RCC_OscConfig+0x64>
 800135e:	4bbd      	ldr	r3, [pc, #756]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	025b      	lsls	r3, r3, #9
 8001366:	401a      	ands	r2, r3
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	025b      	lsls	r3, r3, #9
 800136c:	429a      	cmp	r2, r3
 800136e:	d10d      	bne.n	800138c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	4bb8      	ldr	r3, [pc, #736]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	029b      	lsls	r3, r3, #10
 8001378:	4013      	ands	r3, r2
 800137a:	d100      	bne.n	800137e <HAL_RCC_OscConfig+0x56>
 800137c:	e070      	b.n	8001460 <HAL_RCC_OscConfig+0x138>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d000      	beq.n	8001388 <HAL_RCC_OscConfig+0x60>
 8001386:	e06b      	b.n	8001460 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e2d8      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d107      	bne.n	80013a4 <HAL_RCC_OscConfig+0x7c>
 8001394:	4baf      	ldr	r3, [pc, #700]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4bae      	ldr	r3, [pc, #696]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800139a:	2180      	movs	r1, #128	; 0x80
 800139c:	0249      	lsls	r1, r1, #9
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e02f      	b.n	8001404 <HAL_RCC_OscConfig+0xdc>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10c      	bne.n	80013c6 <HAL_RCC_OscConfig+0x9e>
 80013ac:	4ba9      	ldr	r3, [pc, #676]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4ba8      	ldr	r3, [pc, #672]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	49a9      	ldr	r1, [pc, #676]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80013b4:	400a      	ands	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	4ba6      	ldr	r3, [pc, #664]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4ba5      	ldr	r3, [pc, #660]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013be:	49a7      	ldr	r1, [pc, #668]	; (800165c <HAL_RCC_OscConfig+0x334>)
 80013c0:	400a      	ands	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e01e      	b.n	8001404 <HAL_RCC_OscConfig+0xdc>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b05      	cmp	r3, #5
 80013cc:	d10e      	bne.n	80013ec <HAL_RCC_OscConfig+0xc4>
 80013ce:	4ba1      	ldr	r3, [pc, #644]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4ba0      	ldr	r3, [pc, #640]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	02c9      	lsls	r1, r1, #11
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	4b9d      	ldr	r3, [pc, #628]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b9c      	ldr	r3, [pc, #624]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	2180      	movs	r1, #128	; 0x80
 80013e4:	0249      	lsls	r1, r1, #9
 80013e6:	430a      	orrs	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e00b      	b.n	8001404 <HAL_RCC_OscConfig+0xdc>
 80013ec:	4b99      	ldr	r3, [pc, #612]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b98      	ldr	r3, [pc, #608]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	4999      	ldr	r1, [pc, #612]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80013f4:	400a      	ands	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	4b96      	ldr	r3, [pc, #600]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b95      	ldr	r3, [pc, #596]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	4997      	ldr	r1, [pc, #604]	; (800165c <HAL_RCC_OscConfig+0x334>)
 8001400:	400a      	ands	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d014      	beq.n	8001436 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fc74 	bl	8000cf8 <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001416:	f7ff fc6f 	bl	8000cf8 <HAL_GetTick>
 800141a:	0002      	movs	r2, r0
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b64      	cmp	r3, #100	; 0x64
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e28a      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001428:	4b8a      	ldr	r3, [pc, #552]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	029b      	lsls	r3, r3, #10
 8001430:	4013      	ands	r3, r2
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0xee>
 8001434:	e015      	b.n	8001462 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fc5f 	bl	8000cf8 <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fc5a 	bl	8000cf8 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e275      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	4b80      	ldr	r3, [pc, #512]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	029b      	lsls	r3, r3, #10
 800145a:	4013      	ands	r3, r2
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x118>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2202      	movs	r2, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d100      	bne.n	800146e <HAL_RCC_OscConfig+0x146>
 800146c:	e069      	b.n	8001542 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800146e:	4b79      	ldr	r3, [pc, #484]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	220c      	movs	r2, #12
 8001474:	4013      	ands	r3, r2
 8001476:	d00b      	beq.n	8001490 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001478:	4b76      	ldr	r3, [pc, #472]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	220c      	movs	r2, #12
 800147e:	4013      	ands	r3, r2
 8001480:	2b08      	cmp	r3, #8
 8001482:	d11c      	bne.n	80014be <HAL_RCC_OscConfig+0x196>
 8001484:	4b73      	ldr	r3, [pc, #460]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	025b      	lsls	r3, r3, #9
 800148c:	4013      	ands	r3, r2
 800148e:	d116      	bne.n	80014be <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001490:	4b70      	ldr	r3, [pc, #448]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	d005      	beq.n	80014a6 <HAL_RCC_OscConfig+0x17e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d001      	beq.n	80014a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e24b      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a6:	4b6b      	ldr	r3, [pc, #428]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	22f8      	movs	r2, #248	; 0xf8
 80014ac:	4393      	bics	r3, r2
 80014ae:	0019      	movs	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	00da      	lsls	r2, r3, #3
 80014b6:	4b67      	ldr	r3, [pc, #412]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014bc:	e041      	b.n	8001542 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d024      	beq.n	8001510 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c6:	4b63      	ldr	r3, [pc, #396]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b62      	ldr	r3, [pc, #392]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014cc:	2101      	movs	r1, #1
 80014ce:	430a      	orrs	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fc11 	bl	8000cf8 <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014dc:	f7ff fc0c 	bl	8000cf8 <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e227      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ee:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d0f1      	beq.n	80014dc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b56      	ldr	r3, [pc, #344]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	22f8      	movs	r2, #248	; 0xf8
 80014fe:	4393      	bics	r3, r2
 8001500:	0019      	movs	r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00da      	lsls	r2, r3, #3
 8001508:	4b52      	ldr	r3, [pc, #328]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800150a:	430a      	orrs	r2, r1
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	e018      	b.n	8001542 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001510:	4b50      	ldr	r3, [pc, #320]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b4f      	ldr	r3, [pc, #316]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001516:	2101      	movs	r1, #1
 8001518:	438a      	bics	r2, r1
 800151a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fbec 	bl	8000cf8 <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001526:	f7ff fbe7 	bl	8000cf8 <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e202      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001538:	4b46      	ldr	r3, [pc, #280]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2202      	movs	r2, #2
 800153e:	4013      	ands	r3, r2
 8001540:	d1f1      	bne.n	8001526 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2208      	movs	r2, #8
 8001548:	4013      	ands	r3, r2
 800154a:	d036      	beq.n	80015ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d019      	beq.n	8001588 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001554:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001558:	4b3e      	ldr	r3, [pc, #248]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800155a:	2101      	movs	r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fbca 	bl	8000cf8 <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156a:	f7ff fbc5 	bl	8000cf8 <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e1e0      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157c:	4b35      	ldr	r3, [pc, #212]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d0f1      	beq.n	800156a <HAL_RCC_OscConfig+0x242>
 8001586:	e018      	b.n	80015ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001588:	4b32      	ldr	r3, [pc, #200]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800158a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800158e:	2101      	movs	r1, #1
 8001590:	438a      	bics	r2, r1
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff fbb0 	bl	8000cf8 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159e:	f7ff fbab 	bl	8000cf8 <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e1c6      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	2202      	movs	r2, #2
 80015b6:	4013      	ands	r3, r2
 80015b8:	d1f1      	bne.n	800159e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2204      	movs	r2, #4
 80015c0:	4013      	ands	r3, r2
 80015c2:	d100      	bne.n	80015c6 <HAL_RCC_OscConfig+0x29e>
 80015c4:	e0b4      	b.n	8001730 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	201f      	movs	r0, #31
 80015c8:	183b      	adds	r3, r7, r0
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015d0:	69da      	ldr	r2, [r3, #28]
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	055b      	lsls	r3, r3, #21
 80015d6:	4013      	ands	r3, r2
 80015d8:	d110      	bne.n	80015fc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015dc:	69da      	ldr	r2, [r3, #28]
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	0549      	lsls	r1, r1, #21
 80015e4:	430a      	orrs	r2, r1
 80015e6:	61da      	str	r2, [r3, #28]
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	055b      	lsls	r3, r3, #21
 80015f0:	4013      	ands	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015f6:	183b      	adds	r3, r7, r0
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_RCC_OscConfig+0x338>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4013      	ands	r3, r2
 8001606:	d11a      	bne.n	800163e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_RCC_OscConfig+0x338>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_RCC_OscConfig+0x338>)
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	0049      	lsls	r1, r1, #1
 8001612:	430a      	orrs	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001616:	f7ff fb6f 	bl	8000cf8 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001620:	f7ff fb6a 	bl	8000cf8 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e185      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_RCC_OscConfig+0x338>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4013      	ands	r3, r2
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d10e      	bne.n	8001664 <HAL_RCC_OscConfig+0x33c>
 8001646:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001648:	6a1a      	ldr	r2, [r3, #32]
 800164a:	4b02      	ldr	r3, [pc, #8]	; (8001654 <HAL_RCC_OscConfig+0x32c>)
 800164c:	2101      	movs	r1, #1
 800164e:	430a      	orrs	r2, r1
 8001650:	621a      	str	r2, [r3, #32]
 8001652:	e035      	b.n	80016c0 <HAL_RCC_OscConfig+0x398>
 8001654:	40021000 	.word	0x40021000
 8001658:	fffeffff 	.word	0xfffeffff
 800165c:	fffbffff 	.word	0xfffbffff
 8001660:	40007000 	.word	0x40007000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10c      	bne.n	8001686 <HAL_RCC_OscConfig+0x35e>
 800166c:	4bb6      	ldr	r3, [pc, #728]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800166e:	6a1a      	ldr	r2, [r3, #32]
 8001670:	4bb5      	ldr	r3, [pc, #724]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001672:	2101      	movs	r1, #1
 8001674:	438a      	bics	r2, r1
 8001676:	621a      	str	r2, [r3, #32]
 8001678:	4bb3      	ldr	r3, [pc, #716]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800167a:	6a1a      	ldr	r2, [r3, #32]
 800167c:	4bb2      	ldr	r3, [pc, #712]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800167e:	2104      	movs	r1, #4
 8001680:	438a      	bics	r2, r1
 8001682:	621a      	str	r2, [r3, #32]
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x398>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b05      	cmp	r3, #5
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x380>
 800168e:	4bae      	ldr	r3, [pc, #696]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001690:	6a1a      	ldr	r2, [r3, #32]
 8001692:	4bad      	ldr	r3, [pc, #692]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001694:	2104      	movs	r1, #4
 8001696:	430a      	orrs	r2, r1
 8001698:	621a      	str	r2, [r3, #32]
 800169a:	4bab      	ldr	r3, [pc, #684]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800169c:	6a1a      	ldr	r2, [r3, #32]
 800169e:	4baa      	ldr	r3, [pc, #680]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	621a      	str	r2, [r3, #32]
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0x398>
 80016a8:	4ba7      	ldr	r3, [pc, #668]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80016aa:	6a1a      	ldr	r2, [r3, #32]
 80016ac:	4ba6      	ldr	r3, [pc, #664]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	438a      	bics	r2, r1
 80016b2:	621a      	str	r2, [r3, #32]
 80016b4:	4ba4      	ldr	r3, [pc, #656]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80016b6:	6a1a      	ldr	r2, [r3, #32]
 80016b8:	4ba3      	ldr	r3, [pc, #652]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80016ba:	2104      	movs	r1, #4
 80016bc:	438a      	bics	r2, r1
 80016be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d014      	beq.n	80016f2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7ff fb16 	bl	8000cf8 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	e009      	b.n	80016e6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff fb11 	bl	8000cf8 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	4a9b      	ldr	r2, [pc, #620]	; (800194c <HAL_RCC_OscConfig+0x624>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e12b      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	4b98      	ldr	r3, [pc, #608]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	2202      	movs	r2, #2
 80016ec:	4013      	ands	r3, r2
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x3aa>
 80016f0:	e013      	b.n	800171a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fb01 	bl	8000cf8 <HAL_GetTick>
 80016f6:	0003      	movs	r3, r0
 80016f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fa:	e009      	b.n	8001710 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff fafc 	bl	8000cf8 <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	4a91      	ldr	r2, [pc, #580]	; (800194c <HAL_RCC_OscConfig+0x624>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e116      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001710:	4b8d      	ldr	r3, [pc, #564]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	2202      	movs	r2, #2
 8001716:	4013      	ands	r3, r2
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800171a:	231f      	movs	r3, #31
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001724:	4b88      	ldr	r3, [pc, #544]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	4b87      	ldr	r3, [pc, #540]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800172a:	4989      	ldr	r1, [pc, #548]	; (8001950 <HAL_RCC_OscConfig+0x628>)
 800172c:	400a      	ands	r2, r1
 800172e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2210      	movs	r2, #16
 8001736:	4013      	ands	r3, r2
 8001738:	d063      	beq.n	8001802 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d12a      	bne.n	8001798 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001742:	4b81      	ldr	r3, [pc, #516]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001746:	4b80      	ldr	r3, [pc, #512]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001748:	2104      	movs	r1, #4
 800174a:	430a      	orrs	r2, r1
 800174c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800174e:	4b7e      	ldr	r3, [pc, #504]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001752:	4b7d      	ldr	r3, [pc, #500]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001754:	2101      	movs	r1, #1
 8001756:	430a      	orrs	r2, r1
 8001758:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175a:	f7ff facd 	bl	8000cf8 <HAL_GetTick>
 800175e:	0003      	movs	r3, r0
 8001760:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001764:	f7ff fac8 	bl	8000cf8 <HAL_GetTick>
 8001768:	0002      	movs	r2, r0
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e0e3      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001776:	4b74      	ldr	r3, [pc, #464]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177a:	2202      	movs	r2, #2
 800177c:	4013      	ands	r3, r2
 800177e:	d0f1      	beq.n	8001764 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001780:	4b71      	ldr	r3, [pc, #452]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001784:	22f8      	movs	r2, #248	; 0xf8
 8001786:	4393      	bics	r3, r2
 8001788:	0019      	movs	r1, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	00da      	lsls	r2, r3, #3
 8001790:	4b6d      	ldr	r3, [pc, #436]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001792:	430a      	orrs	r2, r1
 8001794:	635a      	str	r2, [r3, #52]	; 0x34
 8001796:	e034      	b.n	8001802 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	3305      	adds	r3, #5
 800179e:	d111      	bne.n	80017c4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017a0:	4b69      	ldr	r3, [pc, #420]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a4:	4b68      	ldr	r3, [pc, #416]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017a6:	2104      	movs	r1, #4
 80017a8:	438a      	bics	r2, r1
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017ac:	4b66      	ldr	r3, [pc, #408]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b0:	22f8      	movs	r2, #248	; 0xf8
 80017b2:	4393      	bics	r3, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	00da      	lsls	r2, r3, #3
 80017bc:	4b62      	ldr	r3, [pc, #392]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017be:	430a      	orrs	r2, r1
 80017c0:	635a      	str	r2, [r3, #52]	; 0x34
 80017c2:	e01e      	b.n	8001802 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017c4:	4b60      	ldr	r3, [pc, #384]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c8:	4b5f      	ldr	r3, [pc, #380]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017ca:	2104      	movs	r1, #4
 80017cc:	430a      	orrs	r2, r1
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017d0:	4b5d      	ldr	r3, [pc, #372]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d4:	4b5c      	ldr	r3, [pc, #368]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	438a      	bics	r2, r1
 80017da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017dc:	f7ff fa8c 	bl	8000cf8 <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017e6:	f7ff fa87 	bl	8000cf8 <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e0a2      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017f8:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80017fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fc:	2202      	movs	r2, #2
 80017fe:	4013      	ands	r3, r2
 8001800:	d1f1      	bne.n	80017e6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d100      	bne.n	800180c <HAL_RCC_OscConfig+0x4e4>
 800180a:	e097      	b.n	800193c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800180c:	4b4e      	ldr	r3, [pc, #312]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	220c      	movs	r2, #12
 8001812:	4013      	ands	r3, r2
 8001814:	2b08      	cmp	r3, #8
 8001816:	d100      	bne.n	800181a <HAL_RCC_OscConfig+0x4f2>
 8001818:	e06b      	b.n	80018f2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d14c      	bne.n	80018bc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b49      	ldr	r3, [pc, #292]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b48      	ldr	r3, [pc, #288]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001828:	494a      	ldr	r1, [pc, #296]	; (8001954 <HAL_RCC_OscConfig+0x62c>)
 800182a:	400a      	ands	r2, r1
 800182c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fa63 	bl	8000cf8 <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff fa5e 	bl	8000cf8 <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e079      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184a:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	049b      	lsls	r3, r3, #18
 8001852:	4013      	ands	r3, r2
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001856:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	220f      	movs	r2, #15
 800185c:	4393      	bics	r3, r2
 800185e:	0019      	movs	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001864:	4b38      	ldr	r3, [pc, #224]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001866:	430a      	orrs	r2, r1
 8001868:	62da      	str	r2, [r3, #44]	; 0x2c
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4a3a      	ldr	r2, [pc, #232]	; (8001958 <HAL_RCC_OscConfig+0x630>)
 8001870:	4013      	ands	r3, r2
 8001872:	0019      	movs	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	431a      	orrs	r2, r3
 800187e:	4b32      	ldr	r3, [pc, #200]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001880:	430a      	orrs	r2, r1
 8001882:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001884:	4b30      	ldr	r3, [pc, #192]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	0449      	lsls	r1, r1, #17
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff fa31 	bl	8000cf8 <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff fa2c 	bl	8000cf8 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e047      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	049b      	lsls	r3, r3, #18
 80018b6:	4013      	ands	r3, r2
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x574>
 80018ba:	e03f      	b.n	800193c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80018c2:	4924      	ldr	r1, [pc, #144]	; (8001954 <HAL_RCC_OscConfig+0x62c>)
 80018c4:	400a      	ands	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fa16 	bl	8000cf8 <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff fa11 	bl	8000cf8 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e02c      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	049b      	lsls	r3, r3, #18
 80018ec:	4013      	ands	r3, r2
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x5aa>
 80018f0:	e024      	b.n	800193c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e01f      	b.n	800193e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_RCC_OscConfig+0x620>)
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	025b      	lsls	r3, r3, #9
 8001910:	401a      	ands	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	429a      	cmp	r2, r3
 8001918:	d10e      	bne.n	8001938 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	220f      	movs	r2, #15
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d107      	bne.n	8001938 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	23f0      	movs	r3, #240	; 0xf0
 800192c:	039b      	lsls	r3, r3, #14
 800192e:	401a      	ands	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b008      	add	sp, #32
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	40021000 	.word	0x40021000
 800194c:	00001388 	.word	0x00001388
 8001950:	efffffff 	.word	0xefffffff
 8001954:	feffffff 	.word	0xfeffffff
 8001958:	ffc2ffff 	.word	0xffc2ffff

0800195c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0b3      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001970:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2201      	movs	r2, #1
 8001976:	4013      	ands	r3, r2
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d911      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2201      	movs	r2, #1
 8001984:	4393      	bics	r3, r2
 8001986:	0019      	movs	r1, r3
 8001988:	4b55      	ldr	r3, [pc, #340]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001990:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e09a      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2202      	movs	r2, #2
 80019a8:	4013      	ands	r3, r2
 80019aa:	d015      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2204      	movs	r2, #4
 80019b2:	4013      	ands	r3, r2
 80019b4:	d006      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019b6:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4b4a      	ldr	r3, [pc, #296]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 80019bc:	21e0      	movs	r1, #224	; 0xe0
 80019be:	00c9      	lsls	r1, r1, #3
 80019c0:	430a      	orrs	r2, r1
 80019c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	22f0      	movs	r2, #240	; 0xf0
 80019ca:	4393      	bics	r3, r2
 80019cc:	0019      	movs	r1, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	4b44      	ldr	r3, [pc, #272]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2201      	movs	r2, #1
 80019de:	4013      	ands	r3, r2
 80019e0:	d040      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b3e      	ldr	r3, [pc, #248]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	029b      	lsls	r3, r3, #10
 80019f2:	4013      	ands	r3, r2
 80019f4:	d114      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e06e      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a02:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	049b      	lsls	r3, r3, #18
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d108      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e062      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2202      	movs	r2, #2
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e05b      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	4393      	bics	r3, r2
 8001a28:	0019      	movs	r1, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001a30:	430a      	orrs	r2, r1
 8001a32:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a34:	f7ff f960 	bl	8000cf8 <HAL_GetTick>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3c:	e009      	b.n	8001a52 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3e:	f7ff f95b 	bl	8000cf8 <HAL_GetTick>
 8001a42:	0002      	movs	r2, r0
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <HAL_RCC_ClockConfig+0x18c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e042      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	220c      	movs	r2, #12
 8001a58:	401a      	ands	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1ec      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d211      	bcs.n	8001a96 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4393      	bics	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_RCC_ClockConfig+0x184>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e020      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d009      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_RCC_ClockConfig+0x190>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ab4:	f000 f820 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001ab8:	0001      	movs	r1, r0
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_RCC_ClockConfig+0x188>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_RCC_ClockConfig+0x194>)
 8001ac6:	5cd3      	ldrb	r3, [r2, r3]
 8001ac8:	000a      	movs	r2, r1
 8001aca:	40da      	lsrs	r2, r3
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_ClockConfig+0x198>)
 8001ace:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f7ff f8cb 	bl	8000c6c <HAL_InitTick>
  
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b004      	add	sp, #16
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	00001388 	.word	0x00001388
 8001aec:	fffff8ff 	.word	0xfffff8ff
 8001af0:	08002f14 	.word	0x08002f14
 8001af4:	20000000 	.word	0x20000000

08001af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b08f      	sub	sp, #60	; 0x3c
 8001afc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001afe:	2314      	movs	r3, #20
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b06:	c313      	stmia	r3!, {r0, r1, r4}
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	4a29      	ldr	r2, [pc, #164]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b12:	c313      	stmia	r3!, {r0, r1, r4}
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b20:	2300      	movs	r3, #0
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b2c:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b34:	220c      	movs	r2, #12
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d002      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x4a>
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d003      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x50>
 8001b40:	e02d      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b46:	e02d      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	0c9b      	lsrs	r3, r3, #18
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2214      	movs	r2, #20
 8001b52:	18ba      	adds	r2, r7, r2
 8001b54:	5cd3      	ldrb	r3, [r2, r3]
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	4013      	ands	r3, r2
 8001b60:	1d3a      	adds	r2, r7, #4
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	025b      	lsls	r3, r3, #9
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d009      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b72:	4812      	ldr	r0, [pc, #72]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b74:	f7fe fad2 	bl	800011c <__udivsi3>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	001a      	movs	r2, r3
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	4353      	muls	r3, r2
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
 8001b82:	e009      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b86:	000a      	movs	r2, r1
 8001b88:	0152      	lsls	r2, r2, #5
 8001b8a:	1a52      	subs	r2, r2, r1
 8001b8c:	0193      	lsls	r3, r2, #6
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	185b      	adds	r3, r3, r1
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b9c:	e002      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ba2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b00f      	add	sp, #60	; 0x3c
 8001bac:	bd90      	pop	{r4, r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	08002ef4 	.word	0x08002ef4
 8001bb4:	08002f04 	.word	0x08002f04
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	007a1200 	.word	0x007a1200

08001bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc4:	4b02      	ldr	r3, [pc, #8]	; (8001bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	0018      	movs	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bd8:	f7ff fff2 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001bdc:	0001      	movs	r1, r0
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	2207      	movs	r2, #7
 8001be6:	4013      	ands	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	40d9      	lsrs	r1, r3
 8001bee:	000b      	movs	r3, r1
}    
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	08002f24 	.word	0x08002f24

08001c00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e044      	b.n	8001c9c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d107      	bne.n	8001c2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2274      	movs	r2, #116	; 0x74
 8001c1e:	2100      	movs	r1, #0
 8001c20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7fe ff8f 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2224      	movs	r2, #36	; 0x24
 8001c2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	438a      	bics	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 fb6e 	bl	8002324 <UART_SetConfig>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e024      	b.n	8001c9c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f000 fca1 	bl	80025a4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	490d      	ldr	r1, [pc, #52]	; (8001ca4 <HAL_UART_Init+0xa4>)
 8001c6e:	400a      	ands	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2108      	movs	r1, #8
 8001c7e:	438a      	bics	r2, r1
 8001c80:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f000 fd39 	bl	800270c <UART_CheckIdleState>
 8001c9a:	0003      	movs	r3, r0
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b002      	add	sp, #8
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	fffff7ff 	.word	0xfffff7ff

08001ca8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	1dbb      	adds	r3, r7, #6
 8001cb4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	d150      	bne.n	8001d60 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_UART_Receive_IT+0x24>
 8001cc4:	1dbb      	adds	r3, r7, #6
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e048      	b.n	8001d62 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	015b      	lsls	r3, r3, #5
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d109      	bne.n	8001cf0 <HAL_UART_Receive_IT+0x48>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d105      	bne.n	8001cf0 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e038      	b.n	8001d62 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2274      	movs	r2, #116	; 0x74
 8001cf4:	5c9b      	ldrb	r3, [r3, r2]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_UART_Receive_IT+0x56>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e031      	b.n	8001d62 <HAL_UART_Receive_IT+0xba>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2274      	movs	r2, #116	; 0x74
 8001d02:	2101      	movs	r1, #1
 8001d04:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	2380      	movs	r3, #128	; 0x80
 8001d14:	041b      	lsls	r3, r3, #16
 8001d16:	4013      	ands	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8001d1e:	613b      	str	r3, [r7, #16]
  return(result);
 8001d20:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	2301      	movs	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f383 8810 	msr	PRIMASK, r3
}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	04c9      	lsls	r1, r1, #19
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	f383 8810 	msr	PRIMASK, r3
}
 8001d4c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d4e:	1dbb      	adds	r3, r7, #6
 8001d50:	881a      	ldrh	r2, [r3, #0]
 8001d52:	68b9      	ldr	r1, [r7, #8]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	0018      	movs	r0, r3
 8001d58:	f000 fde4 	bl	8002924 <UART_Start_Receive_IT>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	e000      	b.n	8001d62 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8001d60:	2302      	movs	r3, #2
  }
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b008      	add	sp, #32
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b0ab      	sub	sp, #172	; 0xac
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	22a4      	movs	r2, #164	; 0xa4
 8001d7c:	18b9      	adds	r1, r7, r2
 8001d7e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	20a0      	movs	r0, #160	; 0xa0
 8001d88:	1839      	adds	r1, r7, r0
 8001d8a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	219c      	movs	r1, #156	; 0x9c
 8001d94:	1879      	adds	r1, r7, r1
 8001d96:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001d98:	0011      	movs	r1, r2
 8001d9a:	18bb      	adds	r3, r7, r2
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a99      	ldr	r2, [pc, #612]	; (8002004 <HAL_UART_IRQHandler+0x298>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	2298      	movs	r2, #152	; 0x98
 8001da4:	18bc      	adds	r4, r7, r2
 8001da6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001da8:	18bb      	adds	r3, r7, r2
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d114      	bne.n	8001dda <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2220      	movs	r2, #32
 8001db6:	4013      	ands	r3, r2
 8001db8:	d00f      	beq.n	8001dda <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001dba:	183b      	adds	r3, r7, r0
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d00a      	beq.n	8001dda <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d100      	bne.n	8001dce <HAL_UART_IRQHandler+0x62>
 8001dcc:	e27e      	b.n	80022cc <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	0010      	movs	r0, r2
 8001dd6:	4798      	blx	r3
      }
      return;
 8001dd8:	e278      	b.n	80022cc <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001dda:	2398      	movs	r3, #152	; 0x98
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d100      	bne.n	8001de6 <HAL_UART_IRQHandler+0x7a>
 8001de4:	e114      	b.n	8002010 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001de6:	239c      	movs	r3, #156	; 0x9c
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4013      	ands	r3, r2
 8001df0:	d106      	bne.n	8001e00 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001df2:	23a0      	movs	r3, #160	; 0xa0
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a83      	ldr	r2, [pc, #524]	; (8002008 <HAL_UART_IRQHandler+0x29c>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d100      	bne.n	8001e00 <HAL_UART_IRQHandler+0x94>
 8001dfe:	e107      	b.n	8002010 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001e00:	23a4      	movs	r3, #164	; 0xa4
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2201      	movs	r2, #1
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d012      	beq.n	8001e32 <HAL_UART_IRQHandler+0xc6>
 8001e0c:	23a0      	movs	r3, #160	; 0xa0
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4013      	ands	r3, r2
 8001e18:	d00b      	beq.n	8001e32 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	589b      	ldr	r3, [r3, r2]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2180      	movs	r1, #128	; 0x80
 8001e30:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e32:	23a4      	movs	r3, #164	; 0xa4
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d011      	beq.n	8001e62 <HAL_UART_IRQHandler+0xf6>
 8001e3e:	239c      	movs	r3, #156	; 0x9c
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2201      	movs	r2, #1
 8001e46:	4013      	ands	r3, r2
 8001e48:	d00b      	beq.n	8001e62 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2280      	movs	r2, #128	; 0x80
 8001e56:	589b      	ldr	r3, [r3, r2]
 8001e58:	2204      	movs	r2, #4
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2180      	movs	r1, #128	; 0x80
 8001e60:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e62:	23a4      	movs	r3, #164	; 0xa4
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d011      	beq.n	8001e92 <HAL_UART_IRQHandler+0x126>
 8001e6e:	239c      	movs	r3, #156	; 0x9c
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2201      	movs	r2, #1
 8001e76:	4013      	ands	r3, r2
 8001e78:	d00b      	beq.n	8001e92 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2204      	movs	r2, #4
 8001e80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	589b      	ldr	r3, [r3, r2]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001e92:	23a4      	movs	r3, #164	; 0xa4
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2208      	movs	r2, #8
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d017      	beq.n	8001ece <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e9e:	23a0      	movs	r3, #160	; 0xa0
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d105      	bne.n	8001eb6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001eaa:	239c      	movs	r3, #156	; 0x9c
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001eb4:	d00b      	beq.n	8001ece <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2208      	movs	r2, #8
 8001ebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	589b      	ldr	r3, [r3, r2]
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001ece:	23a4      	movs	r3, #164	; 0xa4
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d013      	beq.n	8001f04 <HAL_UART_IRQHandler+0x198>
 8001edc:	23a0      	movs	r3, #160	; 0xa0
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	04db      	lsls	r3, r3, #19
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d00c      	beq.n	8001f04 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	589b      	ldr	r3, [r3, r2]
 8001efa:	2220      	movs	r2, #32
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	589b      	ldr	r3, [r3, r2]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d100      	bne.n	8001f10 <HAL_UART_IRQHandler+0x1a4>
 8001f0e:	e1df      	b.n	80022d0 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001f10:	23a4      	movs	r3, #164	; 0xa4
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2220      	movs	r2, #32
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d00e      	beq.n	8001f3a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001f1c:	23a0      	movs	r3, #160	; 0xa0
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2220      	movs	r2, #32
 8001f24:	4013      	ands	r3, r2
 8001f26:	d008      	beq.n	8001f3a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	0010      	movs	r0, r2
 8001f38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2280      	movs	r2, #128	; 0x80
 8001f3e:	589b      	ldr	r3, [r3, r2]
 8001f40:	2194      	movs	r1, #148	; 0x94
 8001f42:	187a      	adds	r2, r7, r1
 8001f44:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2240      	movs	r2, #64	; 0x40
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b40      	cmp	r3, #64	; 0x40
 8001f52:	d004      	beq.n	8001f5e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2228      	movs	r2, #40	; 0x28
 8001f5a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f5c:	d047      	beq.n	8001fee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	0018      	movs	r0, r3
 8001f62:	f000 fd7b 	bl	8002a5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2240      	movs	r2, #64	; 0x40
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b40      	cmp	r3, #64	; 0x40
 8001f72:	d137      	bne.n	8001fe4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f74:	f3ef 8310 	mrs	r3, PRIMASK
 8001f78:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f7c:	2090      	movs	r0, #144	; 0x90
 8001f7e:	183a      	adds	r2, r7, r0
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	2301      	movs	r3, #1
 8001f84:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f88:	f383 8810 	msr	PRIMASK, r3
}
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2140      	movs	r1, #64	; 0x40
 8001f9a:	438a      	bics	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	183b      	adds	r3, r7, r0
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fa6:	f383 8810 	msr	PRIMASK, r3
}
 8001faa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d012      	beq.n	8001fda <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb8:	4a14      	ldr	r2, [pc, #80]	; (800200c <HAL_UART_IRQHandler+0x2a0>)
 8001fba:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7fe ffdd 	bl	8000f80 <HAL_DMA_Abort_IT>
 8001fc6:	1e03      	subs	r3, r0, #0
 8001fc8:	d01a      	beq.n	8002000 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd8:	e012      	b.n	8002000 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 f98d 	bl	80022fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe2:	e00d      	b.n	8002000 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f000 f988 	bl	80022fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fec:	e008      	b.n	8002000 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f000 f983 	bl	80022fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001ffe:	e167      	b.n	80022d0 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002000:	46c0      	nop			; (mov r8, r8)
    return;
 8002002:	e165      	b.n	80022d0 <HAL_UART_IRQHandler+0x564>
 8002004:	0000080f 	.word	0x0000080f
 8002008:	04000120 	.word	0x04000120
 800200c:	08002b21 	.word	0x08002b21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002014:	2b01      	cmp	r3, #1
 8002016:	d000      	beq.n	800201a <HAL_UART_IRQHandler+0x2ae>
 8002018:	e131      	b.n	800227e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800201a:	23a4      	movs	r3, #164	; 0xa4
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2210      	movs	r2, #16
 8002022:	4013      	ands	r3, r2
 8002024:	d100      	bne.n	8002028 <HAL_UART_IRQHandler+0x2bc>
 8002026:	e12a      	b.n	800227e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002028:	23a0      	movs	r3, #160	; 0xa0
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2210      	movs	r2, #16
 8002030:	4013      	ands	r3, r2
 8002032:	d100      	bne.n	8002036 <HAL_UART_IRQHandler+0x2ca>
 8002034:	e123      	b.n	800227e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2210      	movs	r2, #16
 800203c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2240      	movs	r2, #64	; 0x40
 8002046:	4013      	ands	r3, r2
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d000      	beq.n	800204e <HAL_UART_IRQHandler+0x2e2>
 800204c:	e09b      	b.n	8002186 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	217e      	movs	r1, #126	; 0x7e
 8002058:	187b      	adds	r3, r7, r1
 800205a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800205c:	187b      	adds	r3, r7, r1
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d100      	bne.n	8002066 <HAL_UART_IRQHandler+0x2fa>
 8002064:	e136      	b.n	80022d4 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2258      	movs	r2, #88	; 0x58
 800206a:	5a9b      	ldrh	r3, [r3, r2]
 800206c:	187a      	adds	r2, r7, r1
 800206e:	8812      	ldrh	r2, [r2, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d300      	bcc.n	8002076 <HAL_UART_IRQHandler+0x30a>
 8002074:	e12e      	b.n	80022d4 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	187a      	adds	r2, r7, r1
 800207a:	215a      	movs	r1, #90	; 0x5a
 800207c:	8812      	ldrh	r2, [r2, #0]
 800207e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b20      	cmp	r3, #32
 8002088:	d06e      	beq.n	8002168 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800208a:	f3ef 8310 	mrs	r3, PRIMASK
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002092:	67bb      	str	r3, [r7, #120]	; 0x78
 8002094:	2301      	movs	r3, #1
 8002096:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209a:	f383 8810 	msr	PRIMASK, r3
}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	498e      	ldr	r1, [pc, #568]	; (80022e4 <HAL_UART_IRQHandler+0x578>)
 80020ac:	400a      	ands	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b6:	f383 8810 	msr	PRIMASK, r3
}
 80020ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020bc:	f3ef 8310 	mrs	r3, PRIMASK
 80020c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80020c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c4:	677b      	str	r3, [r7, #116]	; 0x74
 80020c6:	2301      	movs	r3, #1
 80020c8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020cc:	f383 8810 	msr	PRIMASK, r3
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	438a      	bics	r2, r1
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020e4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e8:	f383 8810 	msr	PRIMASK, r3
}
 80020ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020ee:	f3ef 8310 	mrs	r3, PRIMASK
 80020f2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80020f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020f6:	673b      	str	r3, [r7, #112]	; 0x70
 80020f8:	2301      	movs	r3, #1
 80020fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020fe:	f383 8810 	msr	PRIMASK, r3
}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2140      	movs	r1, #64	; 0x40
 8002110:	438a      	bics	r2, r1
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002116:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800211a:	f383 8810 	msr	PRIMASK, r3
}
 800211e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800212c:	f3ef 8310 	mrs	r3, PRIMASK
 8002130:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002132:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002134:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002136:	2301      	movs	r3, #1
 8002138:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800213a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800213c:	f383 8810 	msr	PRIMASK, r3
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2110      	movs	r1, #16
 800214e:	438a      	bics	r2, r1
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002154:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002158:	f383 8810 	msr	PRIMASK, r3
}
 800215c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	0018      	movs	r0, r3
 8002164:	f7fe fed4 	bl	8000f10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2258      	movs	r2, #88	; 0x58
 800216c:	5a9a      	ldrh	r2, [r3, r2]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	215a      	movs	r1, #90	; 0x5a
 8002172:	5a5b      	ldrh	r3, [r3, r1]
 8002174:	b29b      	uxth	r3, r3
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	b29a      	uxth	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0011      	movs	r1, r2
 800217e:	0018      	movs	r0, r3
 8002180:	f000 f8c4 	bl	800230c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002184:	e0a6      	b.n	80022d4 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2258      	movs	r2, #88	; 0x58
 800218a:	5a99      	ldrh	r1, [r3, r2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	225a      	movs	r2, #90	; 0x5a
 8002190:	5a9b      	ldrh	r3, [r3, r2]
 8002192:	b29a      	uxth	r2, r3
 8002194:	208e      	movs	r0, #142	; 0x8e
 8002196:	183b      	adds	r3, r7, r0
 8002198:	1a8a      	subs	r2, r1, r2
 800219a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	225a      	movs	r2, #90	; 0x5a
 80021a0:	5a9b      	ldrh	r3, [r3, r2]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d100      	bne.n	80021aa <HAL_UART_IRQHandler+0x43e>
 80021a8:	e096      	b.n	80022d8 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 80021aa:	183b      	adds	r3, r7, r0
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d100      	bne.n	80021b4 <HAL_UART_IRQHandler+0x448>
 80021b2:	e091      	b.n	80022d8 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021b4:	f3ef 8310 	mrs	r3, PRIMASK
 80021b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80021ba:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021bc:	2488      	movs	r4, #136	; 0x88
 80021be:	193a      	adds	r2, r7, r4
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	2301      	movs	r3, #1
 80021c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f383 8810 	msr	PRIMASK, r3
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4943      	ldr	r1, [pc, #268]	; (80022e8 <HAL_UART_IRQHandler+0x57c>)
 80021da:	400a      	ands	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	193b      	adds	r3, r7, r4
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f383 8810 	msr	PRIMASK, r3
}
 80021ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021ec:	f3ef 8310 	mrs	r3, PRIMASK
 80021f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80021f2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021f4:	2484      	movs	r4, #132	; 0x84
 80021f6:	193a      	adds	r2, r7, r4
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	2301      	movs	r3, #1
 80021fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f383 8810 	msr	PRIMASK, r3
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2101      	movs	r1, #1
 8002212:	438a      	bics	r2, r1
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	193b      	adds	r3, r7, r4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	f383 8810 	msr	PRIMASK, r3
}
 8002222:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002236:	f3ef 8310 	mrs	r3, PRIMASK
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800223e:	2480      	movs	r4, #128	; 0x80
 8002240:	193a      	adds	r2, r7, r4
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	2301      	movs	r3, #1
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224a:	f383 8810 	msr	PRIMASK, r3
}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2110      	movs	r1, #16
 800225c:	438a      	bics	r2, r1
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	193b      	adds	r3, r7, r4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	f383 8810 	msr	PRIMASK, r3
}
 800226c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800226e:	183b      	adds	r3, r7, r0
 8002270:	881a      	ldrh	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	0011      	movs	r1, r2
 8002276:	0018      	movs	r0, r3
 8002278:	f000 f848 	bl	800230c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800227c:	e02c      	b.n	80022d8 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800227e:	23a4      	movs	r3, #164	; 0xa4
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	4013      	ands	r3, r2
 8002288:	d00f      	beq.n	80022aa <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800228a:	23a0      	movs	r3, #160	; 0xa0
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2280      	movs	r2, #128	; 0x80
 8002292:	4013      	ands	r3, r2
 8002294:	d009      	beq.n	80022aa <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01e      	beq.n	80022dc <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	0010      	movs	r0, r2
 80022a6:	4798      	blx	r3
    }
    return;
 80022a8:	e018      	b.n	80022dc <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80022aa:	23a4      	movs	r3, #164	; 0xa4
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2240      	movs	r2, #64	; 0x40
 80022b2:	4013      	ands	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_UART_IRQHandler+0x572>
 80022b6:	23a0      	movs	r3, #160	; 0xa0
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2240      	movs	r2, #64	; 0x40
 80022be:	4013      	ands	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f000 fc42 	bl	8002b4e <UART_EndTransmit_IT>
    return;
 80022ca:	e008      	b.n	80022de <HAL_UART_IRQHandler+0x572>
      return;
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	e006      	b.n	80022de <HAL_UART_IRQHandler+0x572>
    return;
 80022d0:	46c0      	nop			; (mov r8, r8)
 80022d2:	e004      	b.n	80022de <HAL_UART_IRQHandler+0x572>
      return;
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	e002      	b.n	80022de <HAL_UART_IRQHandler+0x572>
      return;
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	e000      	b.n	80022de <HAL_UART_IRQHandler+0x572>
    return;
 80022dc:	46c0      	nop			; (mov r8, r8)
  }

}
 80022de:	46bd      	mov	sp, r7
 80022e0:	b02b      	add	sp, #172	; 0xac
 80022e2:	bd90      	pop	{r4, r7, pc}
 80022e4:	fffffeff 	.word	0xfffffeff
 80022e8:	fffffedf 	.word	0xfffffedf

080022ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	000a      	movs	r2, r1
 8002316:	1cbb      	adds	r3, r7, #2
 8002318:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b002      	add	sp, #8
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800232c:	231e      	movs	r3, #30
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a8d      	ldr	r2, [pc, #564]	; (8002588 <UART_SetConfig+0x264>)
 8002354:	4013      	ands	r3, r2
 8002356:	0019      	movs	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	430a      	orrs	r2, r1
 8002360:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a88      	ldr	r2, [pc, #544]	; (800258c <UART_SetConfig+0x268>)
 800236a:	4013      	ands	r3, r2
 800236c:	0019      	movs	r1, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a7f      	ldr	r2, [pc, #508]	; (8002590 <UART_SetConfig+0x26c>)
 8002392:	4013      	ands	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	430a      	orrs	r2, r1
 800239e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a7b      	ldr	r2, [pc, #492]	; (8002594 <UART_SetConfig+0x270>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d127      	bne.n	80023fa <UART_SetConfig+0xd6>
 80023aa:	4b7b      	ldr	r3, [pc, #492]	; (8002598 <UART_SetConfig+0x274>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	2203      	movs	r2, #3
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d00d      	beq.n	80023d2 <UART_SetConfig+0xae>
 80023b6:	d81b      	bhi.n	80023f0 <UART_SetConfig+0xcc>
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d014      	beq.n	80023e6 <UART_SetConfig+0xc2>
 80023bc:	d818      	bhi.n	80023f0 <UART_SetConfig+0xcc>
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <UART_SetConfig+0xa4>
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d00a      	beq.n	80023dc <UART_SetConfig+0xb8>
 80023c6:	e013      	b.n	80023f0 <UART_SetConfig+0xcc>
 80023c8:	231f      	movs	r3, #31
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
 80023d0:	e021      	b.n	8002416 <UART_SetConfig+0xf2>
 80023d2:	231f      	movs	r3, #31
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	2202      	movs	r2, #2
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	e01c      	b.n	8002416 <UART_SetConfig+0xf2>
 80023dc:	231f      	movs	r3, #31
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	2204      	movs	r2, #4
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e017      	b.n	8002416 <UART_SetConfig+0xf2>
 80023e6:	231f      	movs	r3, #31
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	2208      	movs	r2, #8
 80023ec:	701a      	strb	r2, [r3, #0]
 80023ee:	e012      	b.n	8002416 <UART_SetConfig+0xf2>
 80023f0:	231f      	movs	r3, #31
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	2210      	movs	r2, #16
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	e00d      	b.n	8002416 <UART_SetConfig+0xf2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a67      	ldr	r2, [pc, #412]	; (800259c <UART_SetConfig+0x278>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d104      	bne.n	800240e <UART_SetConfig+0xea>
 8002404:	231f      	movs	r3, #31
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	e003      	b.n	8002416 <UART_SetConfig+0xf2>
 800240e:	231f      	movs	r3, #31
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	2210      	movs	r2, #16
 8002414:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69da      	ldr	r2, [r3, #28]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	429a      	cmp	r2, r3
 8002420:	d15d      	bne.n	80024de <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002422:	231f      	movs	r3, #31
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b08      	cmp	r3, #8
 800242a:	d015      	beq.n	8002458 <UART_SetConfig+0x134>
 800242c:	dc18      	bgt.n	8002460 <UART_SetConfig+0x13c>
 800242e:	2b04      	cmp	r3, #4
 8002430:	d00d      	beq.n	800244e <UART_SetConfig+0x12a>
 8002432:	dc15      	bgt.n	8002460 <UART_SetConfig+0x13c>
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <UART_SetConfig+0x11a>
 8002438:	2b02      	cmp	r3, #2
 800243a:	d005      	beq.n	8002448 <UART_SetConfig+0x124>
 800243c:	e010      	b.n	8002460 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800243e:	f7ff fbc9 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8002442:	0003      	movs	r3, r0
 8002444:	61bb      	str	r3, [r7, #24]
        break;
 8002446:	e012      	b.n	800246e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002448:	4b55      	ldr	r3, [pc, #340]	; (80025a0 <UART_SetConfig+0x27c>)
 800244a:	61bb      	str	r3, [r7, #24]
        break;
 800244c:	e00f      	b.n	800246e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800244e:	f7ff fb53 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8002452:	0003      	movs	r3, r0
 8002454:	61bb      	str	r3, [r7, #24]
        break;
 8002456:	e00a      	b.n	800246e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	61bb      	str	r3, [r7, #24]
        break;
 800245e:	e006      	b.n	800246e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002464:	231e      	movs	r3, #30
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
        break;
 800246c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d100      	bne.n	8002476 <UART_SetConfig+0x152>
 8002474:	e07b      	b.n	800256e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	005a      	lsls	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	18d2      	adds	r2, r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	0019      	movs	r1, r3
 8002488:	0010      	movs	r0, r2
 800248a:	f7fd fe47 	bl	800011c <__udivsi3>
 800248e:	0003      	movs	r3, r0
 8002490:	b29b      	uxth	r3, r3
 8002492:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	d91c      	bls.n	80024d4 <UART_SetConfig+0x1b0>
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	025b      	lsls	r3, r3, #9
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d217      	bcs.n	80024d4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	200e      	movs	r0, #14
 80024aa:	183b      	adds	r3, r7, r0
 80024ac:	210f      	movs	r1, #15
 80024ae:	438a      	bics	r2, r1
 80024b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2207      	movs	r2, #7
 80024ba:	4013      	ands	r3, r2
 80024bc:	b299      	uxth	r1, r3
 80024be:	183b      	adds	r3, r7, r0
 80024c0:	183a      	adds	r2, r7, r0
 80024c2:	8812      	ldrh	r2, [r2, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	183a      	adds	r2, r7, r0
 80024ce:	8812      	ldrh	r2, [r2, #0]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	e04c      	b.n	800256e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80024d4:	231e      	movs	r3, #30
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e047      	b.n	800256e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024de:	231f      	movs	r3, #31
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d015      	beq.n	8002514 <UART_SetConfig+0x1f0>
 80024e8:	dc18      	bgt.n	800251c <UART_SetConfig+0x1f8>
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d00d      	beq.n	800250a <UART_SetConfig+0x1e6>
 80024ee:	dc15      	bgt.n	800251c <UART_SetConfig+0x1f8>
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <UART_SetConfig+0x1d6>
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d005      	beq.n	8002504 <UART_SetConfig+0x1e0>
 80024f8:	e010      	b.n	800251c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024fa:	f7ff fb6b 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 80024fe:	0003      	movs	r3, r0
 8002500:	61bb      	str	r3, [r7, #24]
        break;
 8002502:	e012      	b.n	800252a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <UART_SetConfig+0x27c>)
 8002506:	61bb      	str	r3, [r7, #24]
        break;
 8002508:	e00f      	b.n	800252a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800250a:	f7ff faf5 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 800250e:	0003      	movs	r3, r0
 8002510:	61bb      	str	r3, [r7, #24]
        break;
 8002512:	e00a      	b.n	800252a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	61bb      	str	r3, [r7, #24]
        break;
 800251a:	e006      	b.n	800252a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002520:	231e      	movs	r3, #30
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
        break;
 8002528:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01e      	beq.n	800256e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	085a      	lsrs	r2, r3, #1
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	18d2      	adds	r2, r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	0019      	movs	r1, r3
 8002540:	0010      	movs	r0, r2
 8002542:	f7fd fdeb 	bl	800011c <__udivsi3>
 8002546:	0003      	movs	r3, r0
 8002548:	b29b      	uxth	r3, r3
 800254a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b0f      	cmp	r3, #15
 8002550:	d909      	bls.n	8002566 <UART_SetConfig+0x242>
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	025b      	lsls	r3, r3, #9
 8002558:	429a      	cmp	r2, r3
 800255a:	d204      	bcs.n	8002566 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	e003      	b.n	800256e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002566:	231e      	movs	r3, #30
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800257a:	231e      	movs	r3, #30
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	781b      	ldrb	r3, [r3, #0]
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	b008      	add	sp, #32
 8002586:	bd80      	pop	{r7, pc}
 8002588:	ffff69f3 	.word	0xffff69f3
 800258c:	ffffcfff 	.word	0xffffcfff
 8002590:	fffff4ff 	.word	0xfffff4ff
 8002594:	40013800 	.word	0x40013800
 8002598:	40021000 	.word	0x40021000
 800259c:	40004400 	.word	0x40004400
 80025a0:	007a1200 	.word	0x007a1200

080025a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	2201      	movs	r2, #1
 80025b2:	4013      	ands	r3, r2
 80025b4:	d00b      	beq.n	80025ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a4a      	ldr	r2, [pc, #296]	; (80026e8 <UART_AdvFeatureConfig+0x144>)
 80025be:	4013      	ands	r3, r2
 80025c0:	0019      	movs	r1, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	2202      	movs	r2, #2
 80025d4:	4013      	ands	r3, r2
 80025d6:	d00b      	beq.n	80025f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4a43      	ldr	r2, [pc, #268]	; (80026ec <UART_AdvFeatureConfig+0x148>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	0019      	movs	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	2204      	movs	r2, #4
 80025f6:	4013      	ands	r3, r2
 80025f8:	d00b      	beq.n	8002612 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a3b      	ldr	r2, [pc, #236]	; (80026f0 <UART_AdvFeatureConfig+0x14c>)
 8002602:	4013      	ands	r3, r2
 8002604:	0019      	movs	r1, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	2208      	movs	r2, #8
 8002618:	4013      	ands	r3, r2
 800261a:	d00b      	beq.n	8002634 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a34      	ldr	r2, [pc, #208]	; (80026f4 <UART_AdvFeatureConfig+0x150>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	2210      	movs	r2, #16
 800263a:	4013      	ands	r3, r2
 800263c:	d00b      	beq.n	8002656 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4a2c      	ldr	r2, [pc, #176]	; (80026f8 <UART_AdvFeatureConfig+0x154>)
 8002646:	4013      	ands	r3, r2
 8002648:	0019      	movs	r1, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	2220      	movs	r2, #32
 800265c:	4013      	ands	r3, r2
 800265e:	d00b      	beq.n	8002678 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4a25      	ldr	r2, [pc, #148]	; (80026fc <UART_AdvFeatureConfig+0x158>)
 8002668:	4013      	ands	r3, r2
 800266a:	0019      	movs	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	2240      	movs	r2, #64	; 0x40
 800267e:	4013      	ands	r3, r2
 8002680:	d01d      	beq.n	80026be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <UART_AdvFeatureConfig+0x15c>)
 800268a:	4013      	ands	r3, r2
 800268c:	0019      	movs	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	035b      	lsls	r3, r3, #13
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d10b      	bne.n	80026be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a15      	ldr	r2, [pc, #84]	; (8002704 <UART_AdvFeatureConfig+0x160>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	4013      	ands	r3, r2
 80026c6:	d00b      	beq.n	80026e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <UART_AdvFeatureConfig+0x164>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	605a      	str	r2, [r3, #4]
  }
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	fffdffff 	.word	0xfffdffff
 80026ec:	fffeffff 	.word	0xfffeffff
 80026f0:	fffbffff 	.word	0xfffbffff
 80026f4:	ffff7fff 	.word	0xffff7fff
 80026f8:	ffffefff 	.word	0xffffefff
 80026fc:	ffffdfff 	.word	0xffffdfff
 8002700:	ffefffff 	.word	0xffefffff
 8002704:	ff9fffff 	.word	0xff9fffff
 8002708:	fff7ffff 	.word	0xfff7ffff

0800270c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af02      	add	r7, sp, #8
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2280      	movs	r2, #128	; 0x80
 8002718:	2100      	movs	r1, #0
 800271a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800271c:	f7fe faec 	bl	8000cf8 <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2208      	movs	r2, #8
 800272c:	4013      	ands	r3, r2
 800272e:	2b08      	cmp	r3, #8
 8002730:	d10c      	bne.n	800274c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2280      	movs	r2, #128	; 0x80
 8002736:	0391      	lsls	r1, r2, #14
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4a17      	ldr	r2, [pc, #92]	; (8002798 <UART_CheckIdleState+0x8c>)
 800273c:	9200      	str	r2, [sp, #0]
 800273e:	2200      	movs	r2, #0
 8002740:	f000 f82c 	bl	800279c <UART_WaitOnFlagUntilTimeout>
 8002744:	1e03      	subs	r3, r0, #0
 8002746:	d001      	beq.n	800274c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e021      	b.n	8002790 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2204      	movs	r2, #4
 8002754:	4013      	ands	r3, r2
 8002756:	2b04      	cmp	r3, #4
 8002758:	d10c      	bne.n	8002774 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2280      	movs	r2, #128	; 0x80
 800275e:	03d1      	lsls	r1, r2, #15
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <UART_CheckIdleState+0x8c>)
 8002764:	9200      	str	r2, [sp, #0]
 8002766:	2200      	movs	r2, #0
 8002768:	f000 f818 	bl	800279c <UART_WaitOnFlagUntilTimeout>
 800276c:	1e03      	subs	r3, r0, #0
 800276e:	d001      	beq.n	8002774 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e00d      	b.n	8002790 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2274      	movs	r2, #116	; 0x74
 800278a:	2100      	movs	r1, #0
 800278c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	b004      	add	sp, #16
 8002796:	bd80      	pop	{r7, pc}
 8002798:	01ffffff 	.word	0x01ffffff

0800279c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b094      	sub	sp, #80	; 0x50
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	1dfb      	adds	r3, r7, #7
 80027aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ac:	e0a3      	b.n	80028f6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b0:	3301      	adds	r3, #1
 80027b2:	d100      	bne.n	80027b6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80027b4:	e09f      	b.n	80028f6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b6:	f7fe fa9f 	bl	8000cf8 <HAL_GetTick>
 80027ba:	0002      	movs	r2, r0
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d302      	bcc.n	80027cc <UART_WaitOnFlagUntilTimeout+0x30>
 80027c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d13d      	bne.n	8002848 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027cc:	f3ef 8310 	mrs	r3, PRIMASK
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027d4:	647b      	str	r3, [r7, #68]	; 0x44
 80027d6:	2301      	movs	r3, #1
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	f383 8810 	msr	PRIMASK, r3
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	494c      	ldr	r1, [pc, #304]	; (8002920 <UART_WaitOnFlagUntilTimeout+0x184>)
 80027ee:	400a      	ands	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f8:	f383 8810 	msr	PRIMASK, r3
}
 80027fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002802:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002806:	643b      	str	r3, [r7, #64]	; 0x40
 8002808:	2301      	movs	r3, #1
 800280a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280e:	f383 8810 	msr	PRIMASK, r3
}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2101      	movs	r1, #1
 8002820:	438a      	bics	r2, r1
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282a:	f383 8810 	msr	PRIMASK, r3
}
 800282e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2220      	movs	r2, #32
 800283a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2274      	movs	r2, #116	; 0x74
 8002840:	2100      	movs	r1, #0
 8002842:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e067      	b.n	8002918 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2204      	movs	r2, #4
 8002850:	4013      	ands	r3, r2
 8002852:	d050      	beq.n	80028f6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69da      	ldr	r2, [r3, #28]
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	401a      	ands	r2, r3
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	429a      	cmp	r2, r3
 8002866:	d146      	bne.n	80028f6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	0112      	lsls	r2, r2, #4
 8002870:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002872:	f3ef 8310 	mrs	r3, PRIMASK
 8002876:	613b      	str	r3, [r7, #16]
  return(result);
 8002878:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800287a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800287c:	2301      	movs	r3, #1
 800287e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f383 8810 	msr	PRIMASK, r3
}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4923      	ldr	r1, [pc, #140]	; (8002920 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002894:	400a      	ands	r2, r1
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800289a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	f383 8810 	msr	PRIMASK, r3
}
 80028a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028a4:	f3ef 8310 	mrs	r3, PRIMASK
 80028a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80028aa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80028ae:	2301      	movs	r3, #1
 80028b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	f383 8810 	msr	PRIMASK, r3
}
 80028b8:	46c0      	nop			; (mov r8, r8)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	438a      	bics	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	f383 8810 	msr	PRIMASK, r3
}
 80028d4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	2120      	movs	r1, #32
 80028e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2274      	movs	r2, #116	; 0x74
 80028ee:	2100      	movs	r1, #0
 80028f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e010      	b.n	8002918 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	4013      	ands	r3, r2
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	425a      	negs	r2, r3
 8002906:	4153      	adcs	r3, r2
 8002908:	b2db      	uxtb	r3, r3
 800290a:	001a      	movs	r2, r3
 800290c:	1dfb      	adds	r3, r7, #7
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d100      	bne.n	8002916 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002914:	e74b      	b.n	80027ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b014      	add	sp, #80	; 0x50
 800291e:	bd80      	pop	{r7, pc}
 8002920:	fffffe5f 	.word	0xfffffe5f

08002924 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08c      	sub	sp, #48	; 0x30
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	1dbb      	adds	r3, r7, #6
 8002930:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1dba      	adds	r2, r7, #6
 800293c:	2158      	movs	r1, #88	; 0x58
 800293e:	8812      	ldrh	r2, [r2, #0]
 8002940:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1dba      	adds	r2, r7, #6
 8002946:	215a      	movs	r1, #90	; 0x5a
 8002948:	8812      	ldrh	r2, [r2, #0]
 800294a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	015b      	lsls	r3, r3, #5
 800295a:	429a      	cmp	r2, r3
 800295c:	d10d      	bne.n	800297a <UART_Start_Receive_IT+0x56>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d104      	bne.n	8002970 <UART_Start_Receive_IT+0x4c>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	225c      	movs	r2, #92	; 0x5c
 800296a:	4939      	ldr	r1, [pc, #228]	; (8002a50 <UART_Start_Receive_IT+0x12c>)
 800296c:	5299      	strh	r1, [r3, r2]
 800296e:	e01a      	b.n	80029a6 <UART_Start_Receive_IT+0x82>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	225c      	movs	r2, #92	; 0x5c
 8002974:	21ff      	movs	r1, #255	; 0xff
 8002976:	5299      	strh	r1, [r3, r2]
 8002978:	e015      	b.n	80029a6 <UART_Start_Receive_IT+0x82>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <UART_Start_Receive_IT+0x7a>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d104      	bne.n	8002994 <UART_Start_Receive_IT+0x70>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	225c      	movs	r2, #92	; 0x5c
 800298e:	21ff      	movs	r1, #255	; 0xff
 8002990:	5299      	strh	r1, [r3, r2]
 8002992:	e008      	b.n	80029a6 <UART_Start_Receive_IT+0x82>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	225c      	movs	r2, #92	; 0x5c
 8002998:	217f      	movs	r1, #127	; 0x7f
 800299a:	5299      	strh	r1, [r3, r2]
 800299c:	e003      	b.n	80029a6 <UART_Start_Receive_IT+0x82>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	225c      	movs	r2, #92	; 0x5c
 80029a2:	2100      	movs	r1, #0
 80029a4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	2100      	movs	r1, #0
 80029ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2222      	movs	r2, #34	; 0x22
 80029b2:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b4:	f3ef 8310 	mrs	r3, PRIMASK
 80029b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80029ba:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029be:	2301      	movs	r3, #1
 80029c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	f383 8810 	msr	PRIMASK, r3
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2101      	movs	r1, #1
 80029d6:	430a      	orrs	r2, r1
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	f383 8810 	msr	PRIMASK, r3
}
 80029e4:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	015b      	lsls	r3, r3, #5
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d107      	bne.n	8002a02 <UART_Start_Receive_IT+0xde>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d103      	bne.n	8002a02 <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <UART_Start_Receive_IT+0x130>)
 80029fe:	665a      	str	r2, [r3, #100]	; 0x64
 8002a00:	e002      	b.n	8002a08 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <UART_Start_Receive_IT+0x134>)
 8002a06:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2274      	movs	r2, #116	; 0x74
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a10:	f3ef 8310 	mrs	r3, PRIMASK
 8002a14:	613b      	str	r3, [r7, #16]
  return(result);
 8002a16:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f383 8810 	msr	PRIMASK, r3
}
 8002a24:	46c0      	nop			; (mov r8, r8)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2190      	movs	r1, #144	; 0x90
 8002a32:	0049      	lsls	r1, r1, #1
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f383 8810 	msr	PRIMASK, r3
}
 8002a42:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b00c      	add	sp, #48	; 0x30
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	000001ff 	.word	0x000001ff
 8002a54:	08002d0d 	.word	0x08002d0d
 8002a58:	08002ba5 	.word	0x08002ba5

08002a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08e      	sub	sp, #56	; 0x38
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a64:	f3ef 8310 	mrs	r3, PRIMASK
 8002a68:	617b      	str	r3, [r7, #20]
  return(result);
 8002a6a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a6e:	2301      	movs	r3, #1
 8002a70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f383 8810 	msr	PRIMASK, r3
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4925      	ldr	r1, [pc, #148]	; (8002b1c <UART_EndRxTransfer+0xc0>)
 8002a86:	400a      	ands	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f383 8810 	msr	PRIMASK, r3
}
 8002a94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a96:	f3ef 8310 	mrs	r3, PRIMASK
 8002a9a:	623b      	str	r3, [r7, #32]
  return(result);
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	f383 8810 	msr	PRIMASK, r3
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	438a      	bics	r2, r1
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	f383 8810 	msr	PRIMASK, r3
}
 8002ac6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d118      	bne.n	8002b02 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ad4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ada:	2301      	movs	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f383 8810 	msr	PRIMASK, r3
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2110      	movs	r1, #16
 8002af2:	438a      	bics	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f383 8810 	msr	PRIMASK, r3
}
 8002b00:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b00e      	add	sp, #56	; 0x38
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	fffffedf 	.word	0xfffffedf

08002b20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	225a      	movs	r2, #90	; 0x5a
 8002b32:	2100      	movs	r1, #0
 8002b34:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2252      	movs	r2, #82	; 0x52
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7ff fbdb 	bl	80022fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b004      	add	sp, #16
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b086      	sub	sp, #24
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b56:	f3ef 8310 	mrs	r3, PRIMASK
 8002b5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	2301      	movs	r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f383 8810 	msr	PRIMASK, r3
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2140      	movs	r1, #64	; 0x40
 8002b78:	438a      	bics	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f383 8810 	msr	PRIMASK, r3
}
 8002b86:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f7ff fba8 	bl	80022ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b006      	add	sp, #24
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b090      	sub	sp, #64	; 0x40
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002bac:	203e      	movs	r0, #62	; 0x3e
 8002bae:	183b      	adds	r3, r7, r0
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	215c      	movs	r1, #92	; 0x5c
 8002bb4:	5a52      	ldrh	r2, [r2, r1]
 8002bb6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bbc:	2b22      	cmp	r3, #34	; 0x22
 8002bbe:	d000      	beq.n	8002bc2 <UART_RxISR_8BIT+0x1e>
 8002bc0:	e095      	b.n	8002cee <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	213c      	movs	r1, #60	; 0x3c
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002bcc:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	183b      	adds	r3, r7, r0
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b2d9      	uxtb	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	400a      	ands	r2, r1
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	225a      	movs	r2, #90	; 0x5a
 8002bf2:	5a9b      	ldrh	r3, [r3, r2]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b299      	uxth	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	225a      	movs	r2, #90	; 0x5a
 8002bfe:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	225a      	movs	r2, #90	; 0x5a
 8002c04:	5a9b      	ldrh	r3, [r3, r2]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d178      	bne.n	8002cfe <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c10:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c12:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c14:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c16:	2301      	movs	r3, #1
 8002c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f383 8810 	msr	PRIMASK, r3
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4936      	ldr	r1, [pc, #216]	; (8002d08 <UART_RxISR_8BIT+0x164>)
 8002c2e:	400a      	ands	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	f383 8810 	msr	PRIMASK, r3
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c46:	637b      	str	r3, [r7, #52]	; 0x34
 8002c48:	2301      	movs	r3, #1
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	f383 8810 	msr	PRIMASK, r3
}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2101      	movs	r1, #1
 8002c60:	438a      	bics	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6a:	f383 8810 	msr	PRIMASK, r3
}
 8002c6e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d12f      	bne.n	8002ce4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c90:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30
 8002c94:	2301      	movs	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f383 8810 	msr	PRIMASK, r3
}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2110      	movs	r1, #16
 8002cac:	438a      	bics	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f383 8810 	msr	PRIMASK, r3
}
 8002cba:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d103      	bne.n	8002cd2 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2210      	movs	r2, #16
 8002cd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2258      	movs	r2, #88	; 0x58
 8002cd6:	5a9a      	ldrh	r2, [r3, r2]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	0011      	movs	r1, r2
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7ff fb15 	bl	800230c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002ce2:	e00c      	b.n	8002cfe <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f7fd fd08 	bl	80006fc <HAL_UART_RxCpltCallback>
}
 8002cec:	e007      	b.n	8002cfe <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699a      	ldr	r2, [r3, #24]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2108      	movs	r1, #8
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	619a      	str	r2, [r3, #24]
}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b010      	add	sp, #64	; 0x40
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	fffffedf 	.word	0xfffffedf

08002d0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b090      	sub	sp, #64	; 0x40
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002d14:	203e      	movs	r0, #62	; 0x3e
 8002d16:	183b      	adds	r3, r7, r0
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	215c      	movs	r1, #92	; 0x5c
 8002d1c:	5a52      	ldrh	r2, [r2, r1]
 8002d1e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d24:	2b22      	cmp	r3, #34	; 0x22
 8002d26:	d000      	beq.n	8002d2a <UART_RxISR_16BIT+0x1e>
 8002d28:	e095      	b.n	8002e56 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	213c      	movs	r1, #60	; 0x3c
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002d34:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	183a      	adds	r2, r7, r0
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	8812      	ldrh	r2, [r2, #0]
 8002d44:	4013      	ands	r3, r2
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	1c9a      	adds	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	225a      	movs	r2, #90	; 0x5a
 8002d5a:	5a9b      	ldrh	r3, [r3, r2]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b299      	uxth	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	225a      	movs	r2, #90	; 0x5a
 8002d66:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	225a      	movs	r2, #90	; 0x5a
 8002d6c:	5a9b      	ldrh	r3, [r3, r2]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d178      	bne.n	8002e66 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d74:	f3ef 8310 	mrs	r3, PRIMASK
 8002d78:	617b      	str	r3, [r7, #20]
  return(result);
 8002d7a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f383 8810 	msr	PRIMASK, r3
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4936      	ldr	r1, [pc, #216]	; (8002e70 <UART_RxISR_16BIT+0x164>)
 8002d96:	400a      	ands	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f383 8810 	msr	PRIMASK, r3
}
 8002da4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da6:	f3ef 8310 	mrs	r3, PRIMASK
 8002daa:	623b      	str	r3, [r7, #32]
  return(result);
 8002dac:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
 8002db0:	2301      	movs	r3, #1
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	f383 8810 	msr	PRIMASK, r3
}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	438a      	bics	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	f383 8810 	msr	PRIMASK, r3
}
 8002dd6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d12f      	bne.n	8002e4c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df2:	f3ef 8310 	mrs	r3, PRIMASK
 8002df6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002df8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f383 8810 	msr	PRIMASK, r3
}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2110      	movs	r1, #16
 8002e14:	438a      	bics	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f383 8810 	msr	PRIMASK, r3
}
 8002e22:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	d103      	bne.n	8002e3a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2210      	movs	r2, #16
 8002e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2258      	movs	r2, #88	; 0x58
 8002e3e:	5a9a      	ldrh	r2, [r3, r2]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	0011      	movs	r1, r2
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7ff fa61 	bl	800230c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002e4a:	e00c      	b.n	8002e66 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f7fd fc54 	bl	80006fc <HAL_UART_RxCpltCallback>
}
 8002e54:	e007      	b.n	8002e66 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699a      	ldr	r2, [r3, #24]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2108      	movs	r1, #8
 8002e62:	430a      	orrs	r2, r1
 8002e64:	619a      	str	r2, [r3, #24]
}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b010      	add	sp, #64	; 0x40
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	fffffedf 	.word	0xfffffedf

08002e74 <__libc_init_array>:
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	2600      	movs	r6, #0
 8002e78:	4d0c      	ldr	r5, [pc, #48]	; (8002eac <__libc_init_array+0x38>)
 8002e7a:	4c0d      	ldr	r4, [pc, #52]	; (8002eb0 <__libc_init_array+0x3c>)
 8002e7c:	1b64      	subs	r4, r4, r5
 8002e7e:	10a4      	asrs	r4, r4, #2
 8002e80:	42a6      	cmp	r6, r4
 8002e82:	d109      	bne.n	8002e98 <__libc_init_array+0x24>
 8002e84:	2600      	movs	r6, #0
 8002e86:	f000 f821 	bl	8002ecc <_init>
 8002e8a:	4d0a      	ldr	r5, [pc, #40]	; (8002eb4 <__libc_init_array+0x40>)
 8002e8c:	4c0a      	ldr	r4, [pc, #40]	; (8002eb8 <__libc_init_array+0x44>)
 8002e8e:	1b64      	subs	r4, r4, r5
 8002e90:	10a4      	asrs	r4, r4, #2
 8002e92:	42a6      	cmp	r6, r4
 8002e94:	d105      	bne.n	8002ea2 <__libc_init_array+0x2e>
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
 8002e98:	00b3      	lsls	r3, r6, #2
 8002e9a:	58eb      	ldr	r3, [r5, r3]
 8002e9c:	4798      	blx	r3
 8002e9e:	3601      	adds	r6, #1
 8002ea0:	e7ee      	b.n	8002e80 <__libc_init_array+0xc>
 8002ea2:	00b3      	lsls	r3, r6, #2
 8002ea4:	58eb      	ldr	r3, [r5, r3]
 8002ea6:	4798      	blx	r3
 8002ea8:	3601      	adds	r6, #1
 8002eaa:	e7f2      	b.n	8002e92 <__libc_init_array+0x1e>
 8002eac:	08002f40 	.word	0x08002f40
 8002eb0:	08002f40 	.word	0x08002f40
 8002eb4:	08002f40 	.word	0x08002f40
 8002eb8:	08002f48 	.word	0x08002f48

08002ebc <memset>:
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	1882      	adds	r2, r0, r2
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	7019      	strb	r1, [r3, #0]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <_init>:
 8002ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed2:	bc08      	pop	{r3}
 8002ed4:	469e      	mov	lr, r3
 8002ed6:	4770      	bx	lr

08002ed8 <_fini>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ede:	bc08      	pop	{r3}
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4770      	bx	lr
